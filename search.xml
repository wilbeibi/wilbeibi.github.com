<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>笔记:把时间当做朋友</title>
    <url>/2012/12/2012-12-05-timeasfriend/</url>
    <content><![CDATA[<p>李笑来的书《把时间当作朋友》，讲的还不错。</p>
<h2 id="Chap-0-困境"><a href="#Chap-0-困境" class="headerlink" title="Chap 0 困境"></a><strong>Chap 0 困境</strong></h2><ul>
<li><p>我们总是因纷繁的外物所打扰，以至于在deadline前惊呼“没时间了！”。人是“既勤奋又懒惰”的，我们应该管理的不是时间，而是自己</p>
</li>
<li><p>要经过自己认真思考获得知识。</p>
<blockquote>
<p>人们很难接受与已有知识与经验想做的信息或观念，因为既有的知识与观念都是经过持有者反复筛选的。</p>
</blockquote>
</li>
<li><p>“一切都靠积累”</p>
</li>
</ul>
<h2 id="Chap-1-醒悟"><a href="#Chap-1-醒悟" class="headerlink" title="Chap 1 醒悟"></a><strong>Chap 1 醒悟</strong></h2><h2 id="Chap-2-现实"><a href="#Chap-2-现实" class="headerlink" title="Chap 2 现实"></a><strong>Chap 2 现实</strong></h2><ul>
<li><p>忍受一定程度的未知。有问题解决不了的时候，先记下来，而后继续前行。<br>“foo”、”bar” 什么意思</p>
</li>
<li><p>心怀“梦想”的时间越长，它的沉没成本越高。最终，很多人都在无意之间被自己的“梦想”所绑架。</p>
</li>
<li><p>接受现实，用正确的方法做正确的事情。</p>
</li>
<li><p>承认资源稀缺。时常把自己的一些年头记录下来，然后与这几条显示对照，看看它们是否与这些现实相符。</p>
</li>
</ul>
<h2 id="Chap-3-任务管理"><a href="#Chap-3-任务管理" class="headerlink" title="Chap 3 任务管理"></a><strong>Chap 3 任务管理</strong></h2><ul>
<li>估算时间。在任务中遇到“意外”，从而开始新的征程。所以需要<strong>分辨任务的属性——它是熟悉的还是陌生的</strong><ul>
<li>熟悉的则像WBS(Work Breakdown System)一样，细分为小步骤，注意关键点，考虑如何完美完成任务。</li>
<li>陌生的，平静看待遇到的“意外”，尝试一次。</li>
</ul>
</li>
</ul>
<p> 我们必须处理未知，而从陌生到熟悉，需要花费时间去学习，不可逾越。如<a href="http://norvig.com/21-days.html">《Teach yourself Programming in Ten Years》</a></p>
<ul>
<li><p>任何领域的卓越成就都必须用一生的努力才能取得；稍微低一点的代价都是换不到的。“<a href="http://en.wikipedia.org/wiki/Outliers_(book)">10000小时</a>”理论  </p>
</li>
<li><p>及时行动：**现在就开始！！！**迟迟不开始的最本质原因在于恐惧。</p>
</li>
<li><p>直面困难，很多人只是</p>
</li>
</ul>
<blockquote>
<p>做出了努力的样子，或者显得比较努力而已。<br>因为他们回避困难。任何任务都可以被划分为相对简单的部分和相对困难的部分。我自己的看法：Eat the frog first.先做最困难的部分。</p>
</blockquote>
<ul>
<li><p>人做事的动机来自于：<strong>奖励与惩罚</strong>。很多人实际上不知道自己所谓的“喜欢做某件事”实际上更可能只不过因为那件事相对简单、容易获得奖励而已。</p>
</li>
<li><p>关注步骤：把任务拆分成一个个细小的捕捉，越细越好，每个小任务都能独立完成。核心是<strong>具体化</strong>和<strong>细分拆解</strong>，并在此过程中反复询问为什么要这么做。</p>
</li>
<li><p>时间片方法：25min工作 + 5min休息。pomotodo番茄法。关键就是<strong>拆分任务</strong></p>
</li>
<li><p>感知时间：相信我，你并不孤独。<a href="http://book.douban.com/subject/1115353/">《奇特的一生》</a>柳比歇夫的“是件-时间日志”(Event-time Log),记录事件，和该事件所花费的时间。这样遇到不好的结果的时候，更容易找到缘由</p>
</li>
<li><p>再此基础上，制作预算。这个任务的完成是否对目标达成确实有益</p>
</li>
<li><p>计划，<strong>可行</strong></p>
</li>
<li><p>列表。纸和笔，要随手可及。</p>
<ul>
<li>最重要的任务永远只有一个。</li>
<li>有新鲜主意的时候，专门记载一个下一阶段任务列表中，然后专注于当前该完成的任务上。</li>
<li>列表一旦开始执行就一定要执行到底。</li>
</ul>
</li>
<li><p>将要做的事情的整个过程在脑子里语言一遍甚至多遍（<em>尤其是重要的！</em>）</p>
</li>
<li><p>验收：做事之前，拿出纸笔记录下每一个预定的验收标准。</p>
</li>
</ul>
<h2 id="Chap-4-学习"><a href="#Chap-4-学习" class="headerlink" title="Chap 4 学习"></a><strong>Chap 4 学习</strong></h2><ul>
<li><p>获取知识最为起初的手段就是“体验”，更高级的就是“试错”(Trial and Error)。而“阅读”，是一种非常有效的体验。</p>
</li>
<li><p>哥白尼 “很多时候，人们的善良出自于软弱，而他们的残暴出只不过来自于恐惧。”</p>
</li>
<li><p>自学能力的基础技能是阅读理解能力，检索能力是建立在相当熟练的阅读能力基础上的能力。</p>
</li>
<li><p>**写作能力在自学能力中占据着重要的地位：**写出写出简捷、有效、朴素、准确、具体的说明性说理性文章的能力。</p>
</li>
<li><p>实践能力是自学能力最终能够转化为真正价值的根本。</p>
</li>
</ul>
<h2 id="Chap-5-思考"><a href="#Chap-5-思考" class="headerlink" title="Chap 5 思考"></a><strong>Chap 5 思考</strong></h2><ul>
<li><p>独立思考：当别人告诉你一个结论的时候，你自己动脑重新推演一遍得到结论的过程，看看有没有漏洞，有没有不合理的地方，衡量一下那结论到底有多少道理。</p>
</li>
<li><p>“诉诸权威”(Wishful Thinking)与“诉诸情绪”(Authority Addiction)</p>
</li>
<li><p>常见的逻辑错误（<a href="http://en.wikipedia.org/wiki/Category:Logical_fallacies">Wikipedia</a>）</p>
<ul>
<li>概念不清：学习任何知识的时候，搞清楚所有它的基础概念是最重要的。明白“计划”和“目标”并非一回事，否则会Stick to the plan而最终无法达成目标。“上学”和“学习”不是一回事，“政府”和“国家”不是一回事。</li>
<li>拒绝接受不确定性：所有的“仓促的结论”（Hasty conclusion）也好“仓促的概括”（Hasty<br>  generalization）也好，“过分简单化”（Over simplification）也罢，从根源上来看，都是忽略、拒绝接受不确定性而造成的结果。再比如，所有的粗暴二分法（False dichotomy）也是拒绝接受不确定性的结果。</li>
</ul>
</li>
<li><p>因果关系：</p>
<ol>
<li>A不一定是B的理由</li>
<li>A不一定是B唯一的理由</li>
<li>A不一定是B最重要的理由</li>
</ol>
</li>
<li><p>双盲测试：安慰剂效应(Placebo effect)</p>
</li>
<li><p>自证预言：让自己相信</p>
</li>
<li><p>很多人做不到思维缜密是因为I）喜欢型拒绝思考.II）不懂如何思考。</p>
<ul>
<li>逆命题。分不清原命题和逆命题之间的区别e.g. : 1)  脑残者最好玩的地方在于他们认为别人才是脑残呢。这句话本身并不意味着说 2)”认为别人脑残的人才是脑残”</li>
</ul>
</li>
<li><p>举证责任：“谁主张谁举证”并不仅仅是法律术语，事实上，它的应用范围涉及到生活的方方面面。有些人提出一个观点后，要求对方进行反证。他们的逻辑是“既然你无法证明我是错的，那么我就是对<br>的。”这是一种典型的逻辑错误，学称“Argument from ignorance”（或“appeal to ignorance”）。</p>
</li>
<li><p>案例局限(以偏概全)，对立论证，张冠李戴… …</p>
</li>
<li><p>感悟与道理：Ideas are cheap.感悟≠道理。<strong>道理</strong>是普适的，而<strong>感悟</strong>只不过来自个体经验。<br>e.g.成功学SB。成功者有“认知偏差”（Cognitive Biases），大脑有自我保护的功能：忘记痛苦。人普遍把成功揽到自己身上，把失败归咎于他人或者坏运气(Self-serving Bias 自利性偏差) </p>
</li>
<li><p>傻念头“要是…就好了”,不要这么想。</p>
</li>
</ul>
<h2 id="Chap-6-交流"><a href="#Chap-6-交流" class="headerlink" title="Chap 6 交流"></a><strong>Chap 6 交流</strong></h2><ul>
<li><p>记住要点，理清要点之间的逻辑关系。讲者内容可分为：事实和看法。</p>
</li>
<li><p>一旦决定倾听，就要主动帮助讲者进入“倾诉”状态</p>
</li>
<li><p>勤于反思，深刻了解经验的局限</p>
</li>
<li><p><strong>使用记录是自己能够记住更多经验</strong>：用blog。</p>
</li>
<li><p>经常尝试使用类比(meaphor)跨越未知与已知的障碍。</p>
</li>
<li><p>运用时间积累；耐心等待不能跨越时间的经验。</p>
</li>
</ul>
<h2 id="Chap-7-应用"><a href="#Chap-7-应用" class="headerlink" title="Chap 7 应用"></a><strong>Chap 7 应用</strong></h2><ul>
<li><p>兴趣：人并不是对正在做的事情没有兴趣，而是没能力把目前正在做的事情做好。最终没有人喜欢自己做不好的事情。现在说另外一个方面。人们总说他们真正感兴趣的是别的事情。可事实上，那应该仅仅是因为他们还没开始做那件事情，所以还没有在那件事情上遭受挫折而已。因为还没有遇到过挫折，还没有证明那件事情他们做不好，所以，那件事儿对他们来讲确实具备很大的吸引力。</p>
</li>
<li><p>方法：修佛有四万八千法门，重要的是<strong>策略</strong>和<strong>坚持</strong>。坚持就是重复。</p>
</li>
<li><p>记住痛苦：第一种办法是当你面临尴尬的时候，记得一定要拿出纸笔来，<strong>把你所遇到的尴尬记录下来</strong>—当然，最好是记录在同一个本子里。这样的记录是非常有意义的。因为它会提醒你，这是你曾经遇到过的尴尬。如果你不用纸笔记下来，那你就肯定会忘的。然后还要养成习惯，定期拿出这个本子回顾一下。这个习惯往往会使你很有成就感的，因为你知道，甚至可以清楚地看到你已经有进步了，因为那个本子里记录过的很多的错误你都不再犯了—当然，不再犯那些错误的原因是因为你在不停地提醒你自己！ 另外一个办法是，在面临尴尬的时候，尽量<strong>弱化你的痛苦</strong>。<strong>控制自己的情绪</strong>，不要被你的大脑的直接反应所左右。</p>
</li>
<li><p>灵感：Thomas Sowell的<a href="http://www.amazon.com/gp/product/0465037380">《Knowledge and Decision》</a>。积累（这点我做的很不错，就不做笔记了）</p>
</li>
<li><p>鼓励：鼓励身边的人士一种小众但重要的美德。</p>
</li>
<li><p>效率：100%的效率是不可能的。黄金分割：如果规划的时间是10个小时，用6.18小时去工作。</p>
</li>
<li><p>想办法提前预知自己需要怎样的技能，然后确定那是一个自己可以通过练习真正熟练掌握的技能，而后制定长期计划。</p>
</li>
</ul>
<h2 id="Chap-8-积累"><a href="#Chap-8-积累" class="headerlink" title="Chap 8 积累"></a><strong>Chap 8 积累</strong></h2><ul>
<li><p>Reinhold Niebuhr 在他那著名的“The Serenity Prayer”中说：</p>
<blockquote>
<p>God grant me the serenity to accept the things I cannot<br>change, the courage to change the things I can, and the<br>wisdom to know the difference.<br>愿上帝赐予我从容去接受我不能改变的；赐予我勇<br>气去改变我能够改变的，并赐予我智慧去分辨这之<br>间的区别。</p>
</blockquote>
</li>
<li><p>72法则(Rule of 72):每天增长r%，持续y天，若r*y&#x3D;72,那y天后会差不多翻一番。</p>
</li>
<li><p>越早醒悟越好</p>
</li>
</ul>
<h2 id="What-I-Will-Do"><a href="#What-I-Will-Do" class="headerlink" title="What I Will Do"></a><strong>What I Will Do</strong></h2><ol>
<li><p>用本子记录下每天中每个工作所用的时间（笔记本和<a href="https://www.rescuetime.com/">RescueTime</a>，后者能分析你每天在电脑前时间都花到哪儿去了）<br><img src="http://i.imgur.com/dZwA6.png"></p>
</li>
<li><p>工作约束用番茄工作法，每次专心25min，休息5min（<a href="http://pomotodo.com/">pomotodo</a>和iOS的<a href="https://itunes.apple.com/hk/app/30-30/id505863977?mt=8">30&#x2F;30</a>）</p>
</li>
<li><p>有随身携带的任务记录提醒设备，比如手机。对于没有特定时间要求的，我就存在koalcat’s Clear里(是iPhone中的<a href="http://www.realmacsoftware.com/clear/">Clear</a>的Android版)只设了Todo List和New Idea，记录要做的事和在做的过程中想到的新点子，切记！！不要因为新点子打断当前做的任务，一定要优先完成现在的任务！！！!对于有特定时间要求的，我用Google Calender，因为它能定时给手机发短信提醒哟！对Android手机同步也很好。</p>
</li>
<li><p>定期回顾。只有不断的回顾自己的过去反思才有意义，养成习惯，Wilbeibi，加油！！！</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>一个RSS订阅者的自我修养</title>
    <url>/2012/12/2012-12-11-rss/</url>
    <content><![CDATA[<h2 id="这篇文章想说什么"><a href="#这篇文章想说什么" class="headerlink" title="这篇文章想说什么"></a>这篇文章想说什么</h2><p>人在网络飘，面对浩如烟海的信息，如何有效及时地掌握自己需要的信息？有些网站和博客能提供这些。问题是，这些网站可能很多，每次从收藏夹里一个个点开既费时又费事，而且各个网站更新内容的时间又不固定，难道我们能雇一个人帮我们随时查看各个博客更新的情况么？  </p>
<p><img src="http://i.imgur.com/hZ2eX.jpg">  </p>
<p>RSS(Rich Site Summery)就是这样一个勤恳而免费的“雇员”，帮我们查看抓取所关注的博客的更新。其次，导入笔记。订阅博客，尤其是技术博客，一项很重要的工作就是做笔记，后面会讲到如何从RSS文章导入笔记。</p>
<p>##RSS阅读器<br>国内比较流行的RSS阅读器有鲜果，抓虾，看天下…个人觉得鲜果还算凑合的，支持的博客比较多，而且能通过它查看一些墙外的博客（不通过翻墙，查看抓取的内容）。要说最棒的RSS阅读器，还得是Google Reader，尤其是在平板上通过Reeder查看更新，阅读体验是最棒的。</p>
<p>##做笔记<br>Evernote作为一款优秀的笔记软件（出于严谨的态度，我不得不去掉忍痛去掉“最”字），能完美的满足我们的要求。在Web上，Evernote提供的Chrome插件Evernote Web Clipper和Cleary能较好的把内容clip到笔记本里。前者是直接选取网页中区域（根据网页的CSS结构），后<br>者则能帮我们把网页里一些不相关的东西剔除掉，提取出全文feed。我们知道，针对不同的网站，需要不同的内容提取规则，之所以说Cleary是“较好的”是因为它的规则处理还有瑕疵。所以，我有时候先把笔记存进<a href="http://getpocket.com/">Pocket</a>——一个保存想读文章，并能完美提取的小插件，再从Pocket导到Evernote里。或者，用<a href="http://fivefilters.org/">FiveFilters.org</a>提供的全文feed生成器,把网址往里一扔，OK了。  </p>
<p><img src="http://i.imgur.com/4uIeN.png"></p>
<p>那如果在平板上呢？这时候，就要靠<a href="http://ifttt.com/">ifttt</a>这个好帮手。它能神奇的在各个账号之间建立一个channel。比方说，我要让Google Reader里打星的文章都存到Evernote里，就添加这两者的账号，建一个连接，大功告成。这么牛掰的工具当然不只有这一个功能，还可以把你的Gmail, Google Calender, Dropbox, Pocket, Facebook, 甚至手机账户，都能连起来，按照自己的需求定制channel。<br><img src="http://i.imgur.com/exc5Y.png"></p>
<p>##纸和笔<br>如果只是这样做笔记，只不过是一种更有效的copy&amp;paste,慢慢的笔记本里会积压越来越多的东西，没有时间真正吸收，沦为每天浏览博客整理笔记的机器，这样很糟糕。和菜头有篇《碎片化生存》，说的正是过多的微博和博客导致的对阅读“大部头”能力的丧失，而满足于一些科普类和推崇解决问题tricks的XXX hacks类文章。<br>要把笔记变成自己的东西，一定要有自己的<strong>主动</strong>参与，还是需要保持看纸质书和手写笔记的习惯。</p>
<p>##写出来<br>写博客是个很好的锻炼自己的方式。但是，普通的博客系统只能满足一部分需求，要想随心所欲自由的管理自己的博客（当然得不怕麻烦），<a href="http://www.yangzhiping.com/tech/writing-space.html">Github+Jekyll</a>，或者Octopress都能满足你的要求。</p>
<p>##博客的排版<br>博客的排版是个头疼的事，怎样专心于写作而不被设置字体大小，插入图片和超链接之类的事烦心是个大问题。<a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html">Markdown</a>就是为此应运而生的。此外，Emacs下强大的<a href="http://orgmode.org/">Org-mode</a>也是个相当不错的选择。</p>
<p>##最后，分享一些我觉得不错的博客</p>
<p><strong>Matrix67</strong> <a href="http://www.matrix67.com/">www.matrix67.com</a></p>
<p><strong>酷壳</strong><br><a href="http://coolshell.com/">CoolShell.com</a></p>
<p><strong>浏忙大爆炸</strong><br><a href="http://blog.waterlin.org/">blog.waterlin.org</a></p>
<p><strong>刘未鹏 Mind Hacks</strong><br><a href="http://mindhacks.cn/">mindhacks.cn&#x2F;</a></p>
<p><strong>阮一峰的网络日志</strong><br><a href="http://www.ruanyifeng.com/">www.ruanyifeng.com</a></p>
<p><strong>good coders code,great reuse</strong><br><a href="http://www.catonmat.net/">www.catonmat.net/</a></p>
<p><strong>外刊IT评论</strong><br><a href="http://www.aqee.net/">www.aqee.net/</a></p>
<p><strong>Planet Emacsen</strong><br><a href="http://planet.emacsen.org/">planet.emacsen.org&#x2F;</a></p>
<p><strong>talich闲侃</strong><br><a href="http://talich.cinepedia.cn/">talich.cinepedia.cn</a></p>
<p><strong>李笑来</strong><br><a href="http://lixiaolai.com/">lixiaolai.com&#x2F;</a></p>
<p><strong>学而时嘻之</strong><br><a href="http://www.geekonomics10000.com/">www.geekonomics10000.com/</a></p>
<p><strong>不许联想</strong><br><a href="http://www.wangxiaofeng.net/">www.wangxiaofeng.net/</a></p>
<p><strong>张佳玮写东西的地方</strong><br><a href="http://zhangjiawei.blog.tianya.cn/">zhangjiawei.blog.tianya.cn&#x2F;</a></p>
<p><strong>西西弗斯的健忘症</strong><br><a href="http://lilyshen.wordpress.com/">lilyshen.wordpress.com&#x2F;</a></p>
<p><strong>柴静的博客</strong><br><a href="http://blog.sina.com.cn/chjguancha">blog.sina.com.cn&#x2F;chjguancha</a></p>
<p><strong>和菜头的槽边往事</strong><br><a href="http://www.hecaitou.net/">www.hecaitou.net/</a></p>
<p><strong>吴万伟的博客</strong><br><a href="http://blog.163.com/wuwanwei@yeah/">blog.163.com&#x2F;wuwanwei@yeah&#x2F;</a></p>
<p><strong>马伯庸的异教徒告解室</strong><br><a href="http://blog.sina.com.cn/maboyong">blog.sina.com.cn&#x2F;maboyong</a></p>
<p><strong>Tear Down This Wall</strong><br><a href="http://www.bullogger.com/blogs/tdtw/">http://www.bullogger.com/blogs/tdtw/</a></p>
]]></content>
      <categories>
        <category>Collection</category>
      </categories>
      <tags>
        <tag>RSS</tag>
        <tag>subscribe</tag>
      </tags>
  </entry>
  <entry>
    <title>The Better Way to learn programming is to get away from it</title>
    <url>/2013/10/2013-10-16-awayfrom/</url>
    <content><![CDATA[<p>In the last few weeks I led a life writing C programs 10 hours a day. It was interesting and frustrating, and I learned a lot from that. For one thing, programming is an enjoyable game to me. It drives me thinking problems, force me constructing ideas and making proper solutions. What’s more fascinating is, the machine would tell me whether my solution program is right or wrong in less than a second. The frustrating part is, it always tells me I was wrong. Truth to be told, I am not a good programmer as my friends thought. Hours and hours, I wasting time debugging my programs and finally found out I was wrong at the first thought. So, the problem is, what can I do with that?</p>
<p>The answer generally came to my mind: <strong>The Better Way to learn programming is to get away from it</strong>. Don’t panic, I don’t mean not programming, I mean not programming that soon. We live in an era that computers and internet are easy to access anytime and anywhere, which is lucky, or maybe unlucky to all of us. One story told by <a href="http://en.wikipedia.org/wiki/Alan_Kay">Alan Kay</a> explained my reason:     </p>
<blockquote>
<p>When I was at Stanford with the AI project [in the late 1960s] one of the things we used to do every Thanksgiving is have a computer programming contest with people on research projects in the Bay area. The prize I think was a turkey.</p>
</blockquote>
<blockquote>
<p>[John] McCarthy used to make up the problems. The one year that Knuth entered this, he won both the fastest time getting the program running and he also won the fastest execution of the algorithm. He did it on the worst system with remote batch called the Wilbur system. And he basically beat the shit out of everyone.</p>
</blockquote>
<blockquote>
<p>And they asked him, “How could you possibly do this?” And he answered, “When I learned to program, you were lucky if you got five minutes with the machine a day. If you wanted to get the program going, it just had to be written right. <strong>So people just learned to program like it was carving stone</strong>. You sort of have to sidle up to it. That’s how I learned to program.”</p>
</blockquote>
<p>The dean of my undergraduate CS department has similar experience. When the time they learned programming, the computer didn’t even has a BIOS. They had to use punched cards to operate the machine. Each program they ran has been wrote and reviewed many times. That generation students, have all become something in the field of academic now. </p>
<p>What I learned from these is, <code>gcc -Wall -pendantic-error</code> seems an easy and relatively friendly way to detect where were you wrong in your programs, but scratch paper and pencil would be your more loyally friend when you struggling figuring out the solution of programs. </p>
<p>Someone might ask, does it still worth in nowadays? As a successful example with plenty failure experience of rush to program first each time, I have to say, probably yes, but not necessary. Some of us with  strong ability of abstraction may find is easy to run programs with no errors and warnings at first time. They usually adopt a top-down approach to organize their code: design structures and interfaces first, then implement the details. The classic example of this philosophy could be found in Robert Sedgewick’s <em>&lt;<a href="http://www.amazon.com/gp/product/B004P8J1NA">Algorithms</a>&gt;</em>. </p>
<p>The sad fact is that most people, me included, cannot. So, close your laptop, make a cup of tea, prepare a pencil and some scratch paper, start to program with your brain.</p>
<p>Last but not least, learn to enjoy the life out of the computer science world would also helps you in computer science field. Like Eric S. Raymond’s words in <em>&lt;<a href="http://www.catb.org/esr/faqs/hacker-howto.html">How to become a hacker</a>&gt;</em>:</p>
<blockquote>
<p>Again, to be a hacker, you have to enter the hacker mindset. There are some things you can do when you’re not at a computer that seem to help. They’re not substitutes for hacking (nothing is) but many hackers do them, and feel that they connect in some basic way with the essence of hacking.</p>
</blockquote>
<blockquote>
<ol>
<li><strong>Learn to write your native language well.</strong> Though it’s a common stereotype that programmers can’t write, a surprising number of hackers (including all the most accomplished ones I know of) are very able writers.</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li><strong>Read science fiction.</strong> Go to science fiction conventions (a good way to meet hackers and proto-hackers).</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li><strong>Train in a martial-arts form.</strong> The kind of mental discipline required for martial arts seems to be similar in important ways to what hackers do. The most popular forms among hackers are definitely Asian empty-hand arts such as Tae Kwon Do, various forms of Karate, Kung Fu, Aikido, or Ju Jitsu. Western fencing and Asian sword arts also have visible followings. In places where it’s legal, pistol shooting has been rising in popularity since the late 1990s. The most hackerly martial arts are those which emphasize mental discipline, relaxed awareness, and control, rather than raw strength, athleticism, or physical toughness.</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li><strong>Study an actual meditation discipline.</strong> The perennial favorite among hackers is Zen (importantly, it is possible to benefit from Zen without acquiring a religion or discarding one you already have). Other styles may work as well, but be careful to choose one that doesn’t require you to believe crazy things.</li>
</ol>
</blockquote>
<blockquote>
<ol start="5">
<li><strong>Develop an analytical ear for music.</strong> Learn to appreciate peculiar kinds of music. Learn to play some musical instrument well, or how to sing.</li>
</ol>
</blockquote>
<blockquote>
<ol start="6">
<li><strong>Develop your appreciation of puns and wordplay.</strong></li>
</ol>
</blockquote>
<p>PS: After writing this post, I found Jeff Atwood wrote a similar article in 2007, here it is <a href="http://www.codinghorror.com/blog/2007/01/how-to-become-a-better-programmer-by-not-programming.html">How To Become a Better Programmer by Not Programming</a>.</p>
]]></content>
      <tags>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes of Git</title>
    <url>/2012/12/2012-12-30-ProGit/</url>
    <content><![CDATA[<p><em><strong>Pro Git</strong></em> is an excellent book about Git, and these are my reading notes.  </p>
<p>This is a brief notes about some points of <a href="http://www.amazon.com/gp/product/1430218339"><em><strong>Pro Git</strong></em></a>. It only contains first 3 chapters (contains most commonly used commands of Git). I will maintain this article and keep revising it. Hope it might helpful to you.</p>
<p>##Before Running Git</p>
<ul>
<li><p><strong>Snapshots, Not Differences</strong><br>The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes.</p>
</li>
<li><p><strong>Nearly Every Operation Is Local</strong><br>Most operations in Git only need local files and resources to operate ¡ª generally no information is needed from another computer on your network.</p>
</li>
<li><p><strong>Git Has Integrity</strong><br>Git use checksum, namely, SHA-1, as a reference.</p>
</li>
<li><p><strong>Three States</strong><br>Git has three main states that your files can<br>reside in: <strong>committed</strong>, <strong>modified</strong>, and <strong>staged</strong>. Committed means that the data is safely stored in your local database. Modified means that you have changed the file but have not committed it to your database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot.<br><img src="http://i.imgur.com/yT4Pg.png"></p>
<p>  The basic Git workflow goes something like this:  </p>
<ol>
<li>You modify files in your working directory.  </li>
<li>You stage the files, adding snapshots of them to your staging area.  </li>
<li>You do a commit, which takes the files as they are in the staging area and   stores that snapshot permanently to your Git directory.</li>
</ol>
</li>
</ul>
<p>##Git Basics</p>
<ul>
<li><p>Clone<br><code>git clone git://github.com/USERNAME/REPO.git</code></p>
</li>
<li><p>Check Status<br> <code>git status</code></p>
</li>
<li><p>Trace New File<br><code>git add FILE</code> (The FILE edited after git add need to redo git add to store the changes)</p>
</li>
<li><p>Gitignore<br>if you want to ignore some files, add thier patter to <em>.gitignore</em>. Like *.[oa] (generate while compiling)</p>
<blockquote>
<p>Glob patterns are like simplified regular expressions that shells use. An asterisk (*) matches zero or more characters; [abc]matches any character inside the brackets (in this case a, b, or c); a question mark (?) matches a single character; and brackets enclosing characters separated by a hyphen([0-9]) matches any character between them (in this case 0 through 9) .</p>
</blockquote>
</li>
<li><p>Diff between staged and last commit file<br><code>git diff --cached</code></p>
</li>
<li><p>Committing Changes<br><code>git status</code> before <code>git commit</code>. add <code>-m</code> flag to add commit message, <code>-v</code> to explicit remind every place you modified, <code>-a</code> to automatically stage every file that is already tracked before doing the commit, letting skip the git add part.</p>
</li>
<li><p>Remove<br><code>rm FILE</code> and <code>git rm FILE</code> to delete local files. <code>git rm --cached FILE</code> to remove files in repository.(Could use glob)</p>
</li>
<li><p>Move<br><code>git mv OLD NEW</code> to change the names.</p>
</li>
<li><p>Viewing History<br><code>git log</code>, add <code>-p</code> to show differences in every commits, use <code>-2</code> to see lasted 2 updates, <code>–stat</code> abbreviated stats, <code>–pretty</code> customized formats.</p>
</li>
<li><p>Undo<br>use <code>git commit --amend</code> to add forgetted files or reedit commit messages. (See Book 2.4.1)</p>
</li>
<li><p>Unstaging Staged File<br><code>git reset HEAD FILE</code></p>
</li>
<li><p>Unmodifying a Modified File<br>use <code>git status</code> (See Book 2.4.3)</p>
</li>
<li><p>Fetching and Pulling<br><code>git fetch REMOTE-NAME</code> pull down all the data from that remote project that you don’t have yet.</p>
<blockquote>
<p><code>git fetch origin</code> fetches any new work that has been pushed to that server since you cloned (or last fetched from) it. It’s important to note that the fetch command pulls the data to your local repository and it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.</p>
</blockquote>
</li>
<li><p>Push<br><code>git push origin master</code> will push local master branch to origin server.</p>
</li>
<li><p>Tagging<br><code>git tag</code> to add tags.<code>-a</code> to annotated, <code>-m</code> add comments, <code>git show</code> to check version info.</p>
</li>
<li><p>Git Aliases<br>You can set up an alias for each command with git config. For example, using <code>git config --global alias.ci commit</code> to instead <code>git commit</code> with <code>git ci</code>. Useful Tips: <code>git config --global alias.last &#39;log -1 HEAD&#39;</code> to check last commit by <code>git last</code>.</p>
</li>
</ul>
<h2 id="Git-Branches"><a href="#Git-Branches" class="headerlink" title="Git Branches"></a>Git Branches</h2><ul>
<li><p>HEAD<br>In Git, this is apointer to the local branch you’re currently on.</p>
</li>
<li><p>New Branch<br>Because a branch in Git is in actuality a simple file that contains the 40 character <a href="http://en.wikipedia.org/wiki/SHA-1"><strong>SHA-1</strong></a> checksum of the commit it points to, branches are cheap to create and destroy. Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).</p>
</li>
<li><p>Basic Branching and Merging<br>switch to a certain branch <code>git Check -b BRANCH-B</code>, <code>git merge</code> to merge to master.</p>
</li>
<li><p>Delete Branch<br><code>git branch -d</code> to delete branches. It could be failed if it was unmerged. Thus, you could use <code>git branch -D BRANCH-B</code> to force deleting it, and <code>git branch --no-merged</code> to check unmerged work.</p>
</li>
<li><p>Remote Branch<br>You’d better read the related part of this book! It is a little comfusing but important.</p>
</li>
<li><p>Rebasing<br>With the rebase command, you can take all the changes that were committed on one branch and replay them on another one. For example, <code>git rebase master server</code> checks out the topic branch (in this case,server) for you and replays it onto the base branch (master).It quite cool, read Book 3.5.1 to know more. Summed up in one line <strong>Do not rebase commits that you have pushed to a public repository.</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>notes</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac程序员和他的朋友们</title>
    <url>/2014/03/2014-03-05-macandfriend/</url>
    <content><![CDATA[<h2 id="为什么要用Mac"><a href="#为什么要用Mac" class="headerlink" title="为什么要用Mac"></a>为什么要用Mac</h2><p>Linux内核作者<a href="http://www.zdnet.com/torvalds-switches-to-apple-1139183867/">Linus早就开始使用Mac了</a>（虽然面对记者表现的很扭捏）。Gnome的作者更是理直气壮<a href="http://tirania.org/blog/archive/2013/Mar-05.html">叛逃Linux投奔Mac</a>。如你所知，Mac OSX是<a href="http://programmers.stackexchange.com/questions/51670/why-do-programmers-use-or-recommend-mac-os-x">开发者们的最爱</a>。因为它一方面有非常棒的用户体验，一方面是基于Unix，尽得shell的益处，又避免了Linux下种种繁琐。什么，太贵了，看看<a href="http://www.cnblogs.com/chijianqiang/p/mmac.html">MacTalk是怎么说的</a>。</p>
<p>工欲善其事，必先利其器。这里分享下我的Mac应用和配置。</p>
<span id="more"></span>

<p>基于原则:</p>
<ul>
<li>尊重软件版权，能购买正版的，请尽量购买正版</li>
<li>Don’t Shave Yaks, 不要因为花太多时间配置工具而浪费工作的时间</li>
<li>奥卡姆剃刀，如果一项功能需求只是偶尔用一下，就别配置了。</li>
</ul>
<h2 id="应用-效率"><a href="#应用-效率" class="headerlink" title="应用&amp;效率"></a>应用&amp;效率</h2><h3 id="Dropbox"><a href="#Dropbox" class="headerlink" title="Dropbox"></a>Dropbox</h3><p>大名鼎鼎的Dropbox，无需赘述。是居家旅行，出门必备同步神器。Dropbox较之Google Drive更轻量级，更快，适合在多平台同步正在编辑的文档或者代码。记得Google Drive是没有Linux版客户端的，而Dropbox有！而且，Dropbox的文件分享链接是直接指向文件的，对于在remote terminal上工作且尚不熟悉scp和rsync的同学来说是福音（<code>rsync --daemon</code>效果可以媲美Dropbox）。相比之下，Google Drive 更适合来存放资料，因为它能搜索文档内关键词。</p>
<h3 id="Mou"><a href="#Mou" class="headerlink" title="Mou"></a>Mou</h3><p>我见过最好的MarkDown编辑器，简洁，漂亮，可配置，支持MathJax公式编辑。<br><img src="http://mouapp.com/images/Mou_Screenshot_1.png"></p>
<h3 id="Evernote"><a href="#Evernote" class="headerlink" title="Evernote"></a>Evernote</h3><p>笔记软件，我主要用它在收藏平时看到的好的RSS文章，Prime版的多人协作，幻灯片功能也很赞。</p>
<h3 id="Pocket"><a href="#Pocket" class="headerlink" title="Pocket"></a>Pocket</h3><p>众多的ReadItLater软件中的一个，推荐Pocket是因为它的文本抽取出来的格式比较好，在移动端上的App做的也很出色。</p>
<h3 id="Kaleidoscope"><a href="#Kaleidoscope" class="headerlink" title="Kaleidoscope"></a>Kaleidoscope</h3><p>比较多文档之间的差异。一个命令行党应该忠诚的效忠用<code>diff</code>来比较文件，但是Kaleidoscope真的太好用了，关键是它不仅能逐行比较，还能一块块匹配着比较，还能两个文件夹比较，还能Merge文件。</p>
<h3 id="Alfred-2"><a href="#Alfred-2" class="headerlink" title="Alfred 2"></a>Alfred 2</h3><p>这是一个神奇的快速启动软件，就为了它，你就值得买个Mac。MacTalk里谦虚的称它为“神兵利器”。你可以用它来：</p>
<ul>
<li>打开任何应用</li>
<li>查找文件</li>
<li>执行shell命令</li>
<li>当计算器用</li>
<li>直接写email</li>
<li>在Google&#x2F;Amazon&#x2F;Wikipedia上搜索条目</li>
<li>… …<br>嗯，以上只是它的普通功能，只有这些还不足以称之为伟大。Alfred之牛掰，在于其可编程的第三方workflow插件机制，这样可以在Alfred里搜豆瓣图书，搜Github仓库，查看天气或PM2.5，搜索自己的Evernote笔记，查API文档，一切能想到的，<a href="http://www.zhihu.com/question/20656680">都可以实现</a>。<br><img src="http://i.imgur.com/XDWlNGv.png"><br><img src="http://i.imgur.com/3hpPO97.png"></li>
</ul>
<h3 id="TextExpander"><a href="#TextExpander" class="headerlink" title="TextExpander"></a>TextExpander</h3><p>文本自动补全的插件，自定义好触发的关键词，每次输入这些关键词的时候，biu~，想打的字就全弹出来了。把自己的电话，邮箱，或者写邮件的模板存进去，能避免很多重复的劳动。</p>
<h3 id="Popclip"><a href="#Popclip" class="headerlink" title="Popclip"></a>Popclip</h3><p>文字选中弹出扩展。每次选中文字后，可以快速的把选中文字进行复制，粘贴，查找，加入笔记本等等。</p>
<h3 id="RescueTime-Time-sink"><a href="#RescueTime-Time-sink" class="headerlink" title="RescueTime (Time sink)"></a>RescueTime (Time sink)</h3><p>默默的运行在后台，告诉你你的时间都浪费在哪儿了。每周发邮件告诉你你在哪个软件，哪个网站上花了多少时间，这一天&#x2F;周的效率有多高。你可以定义什么是有效率的行为（比如用Evernote写笔记，用Emacs写代码）加分，哪些是偷懒的行为（看美剧，刷豆瓣）扣分。</p>
<h3 id="LimeChat"><a href="#LimeChat" class="headerlink" title="LimeChat"></a>LimeChat</h3><p>IRC应用，选它是因为其他的IRC应用都太！！难！！用！！了！！</p>
<h3 id="AppCleaner"><a href="#AppCleaner" class="headerlink" title="AppCleaner"></a>AppCleaner</h3><p>删软件清理残余。</p>
<h3 id="Moom"><a href="#Moom" class="headerlink" title="Moom"></a>Moom</h3><p>还在像傻帽一样花半天找到窗口边框笨手笨脚地缩放大小么？用Moom吧，能快速排好窗口，自定义想要的窗口大小。</p>
<h3 id="The-unarchiver"><a href="#The-unarchiver" class="headerlink" title="The unarchiver"></a>The unarchiver</h3><p>普通解压用<code>tar</code>命令，但如何有非UTF-8的中文编码，还是用unarchiver比较方便（命令行下得用<code>find</code> + <code>iconv</code>写一长串，太虐心）</p>
<h2 id="编程-配置"><a href="#编程-配置" class="headerlink" title="编程&amp;配置"></a>编程&amp;配置</h2><h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><p>查文档利器。作者在新版本对它收费$20，丧心病狂，但从长远考虑，还是值得的。能配合Alfred用，省心。</p>
<h3 id="Textmate"><a href="#Textmate" class="headerlink" title="Textmate"></a>Textmate</h3><p>bundle功能很好用，方便快速掌握一门语言。写前端代码很方便。其他时候，还是用Vim&#x2F;Emacs吧。</p>
<h3 id="TotalCommander"><a href="#TotalCommander" class="headerlink" title="TotalCommander"></a>TotalCommander</h3><p>命令行党都有过每天得把Terminal拖来拖去的苦恼。TotalCommander正是这样一款下拉式的终端，类似Gnome下的Guake，也支持多窗口，强烈推荐。</p>
<h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><p>不管你用bash，zsh还是tcsh，有一个好用的Terminal软件是十分必要的，iTerm2就正是一个优秀的终端。好看，配置性极强，有很多方便的功能，戳<a href="http://www.yangzhiping.com/tech/iterm2.html">这篇文章</a>。</p>
<h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>Mac下的包管理器，和ports平分天下。想装什么东西，尽管<code>brew install</code> 就好。</p>
<h3 id="Z-shell-tmux及配置文件"><a href="#Z-shell-tmux及配置文件" class="headerlink" title="Z shell (tmux及配置文件)"></a>Z shell (tmux及配置文件)</h3><p>基于bash的shell，被誉为The Last Shell。配置当然很复杂，不过不要紧，拿来主义一下，用<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>一行代码安装。</p>
<h3 id="z-autojump"><a href="#z-autojump" class="headerlink" title="z&#x2F;autojump"></a>z&#x2F;autojump</h3><p>每天还在为输各种<code>cd</code>而浪费时间？<a href="https://github.com/rupa/z">z</a> 是个极为方便的小配置，它把用户访问过的目录存在记录里，每次输入<code>z &lt;访问过的目录的关键词&gt;</code>，就biu的一声到了。autojump也是类似的工具。</p>
<p><img src="http://i.imgur.com/XFdMrp9.jpg"></p>
<hr>
<p>PS: 这篇文章只是兴之所至，所以很多东西还没来得及说，我会长期更新<br>Wed Mar  5 01:21:05 EST 2014</p>
]]></content>
      <categories>
        <category>Collection</category>
      </categories>
      <tags>
        <tag>miscellaneous</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrape data the right way Part:1</title>
    <url>/2014/05/2014-05-06-scrape_way/</url>
    <content><![CDATA[<p>There is frequently a need to scrape data. Obviously, Python is a good choice for this. The famous libraries like <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> provides a bunch of functions to do these stuffs. But personally, I prefer <a href="http://lxml.de/">lxml</a>.</p>
<h2 id="Why-lxml"><a href="#Why-lxml" class="headerlink" title="Why lxml"></a>Why lxml</h2><p>There already has some <a href="http://stackoverflow.com/questions/4967103/beautifulsoup-and-lxml-html-what-to-prefer#">comparison</a> about pros and cons of each library. As <a href="http://lxml.de/elementsoup.html">lxml document</a> said:</p>
<blockquote>
<p>BeautifulSoup uses a different parsing approach. It is not a real HTML parser but uses regular expressions to dive through tag soup. It is therefore more forgiving in some cases and less good in others. It is not uncommon that lxml&#x2F;libxml2 parses and fixes broken HTML better, but BeautifulSoup has superior support for encoding detection. <strong>It very much depends on the input which parser works better.</strong><br>… …<br>The downside of using this parser is that it is <strong>much slower than</strong> the HTML parser of lxml. <strong>So if performance matters, you might want to consider using soupparser only as a fallback for certain cases.</strong></p>
</blockquote>
<p>In short: lxml is faster when parsing well-formed web page.</p>
<h2 id="Example-Grab-data-from-Craglist"><a href="#Example-Grab-data-from-Craglist" class="headerlink" title="Example: Grab data from Craglist"></a>Example: Grab data from Craglist</h2><p>This is a common scenario. First get links of each entries in a <code>index</code> page.</p>
<p>For example, find all housing in <a href="http://losangeles.craigslist.org/hhh/index.html">http://losangeles.craigslist.org/hhh/index.html</a>. In Chrome, Inspect Element, get XPath link from one link:<br><img src="http://i.imgur.com/M5twZ1U.png"></p>
<p>The xpath is <code>/*[@id=&quot;toc_rows&quot;]/div[2]/p[1]/span[2]/a/@href</code>, from p[1] to p[100]. Save these links to a file <code>crag_link.txt</code>. </p>
<pre><code>from lxml import html
import requests
 
with open(&#39;crag_link.txt&#39;, &#39;a&#39;) as f:
    for i in range(0, 1000, 100):
        pg = &#39;http://losangeles.craigslist.org/hhh/index&#39; + str(i) + &#39;.html&#39;
        src = requests.get(pg)
        if src.status_code == 404:
            sys.exit(1)
        tree = html.fromstring(src.text)
        print &#39;Get page&#39;, i
        for j in range(1, 100+1):
            x_link = &#39;//*[@id=&quot;toc_rows&quot;]/div[2]/p[&#39; + str(j) + &#39;]/span[2]/a/@href&#39;
            links = tree.xpath(x_link)
            for ln in links:
                f.write( &#39;http://losangeles.craigslist.org&#39; + ln + &#39;\n&#39;)
        
    f.close()
</code></pre>
<p>Click into one of the page, for instance, we want to get post id, copy xpath<br>like <code>//*[@id=&quot;pagecontainer&quot;]/section/section[2]/div[2]/p[1]</code>. According to <a href="http://www.w3.org/TR/xpath/">XPath syntax</a>, these path add suffix <code>/text()</code> is what we need.</p>
<pre><code>try:
    post_id = tree.xpath(&#39;//*[@id=&quot;pagecontainer&quot;]/section/section[2]/div[2]/p[1]/text()&#39;)
except:
    # Handle Error
</code></pre>
<p>The reason we add try&#x2F;catch block here is to prevent missing data. Wait a second, what if we have 30 attribute to scrape, do we need to write try&#x2F;catch 30 times. Definitely no. Wrap them into a function might be a good idea. BTW, hardcode xpath into program is not a good idea, by writing a function, we can pass it as a parameter(Or even better, store attribute names and xpaths in a dictionary).</p>
<pre><code>def get_attr(tree, xps):
    return attr_name = tree.xpath(xps)
 
&#39;&#39;&#39; 
xps_dict look like: 
{&#39;post_id&#39;:&#39;//*&lt;somehing&gt;/p[1]/text()&#39;,&#39;post_time&#39;:&#39;//*&lt;somehing&gt;/p[1]/text()&#39;}
&#39;&#39;&#39;
for a, x in xps_dict.iteritems():
    attr[a] = get_attr(tree, x)
</code></pre>
<p>For the Part 2, I will carry on, talk about encoding problem, prevent duplicates and so forth.</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>A Primer to System Administration - Users and groups</title>
    <url>/2014/08/2014-08-08-SysAdmin/</url>
    <content><![CDATA[<h2 id="How-to-create-a-user"><a href="#How-to-create-a-user" class="headerlink" title="How to create a user"></a>How to create a user</h2><p>By useradd:</p>
<pre><code>useradd -m -d &lt;HomeDir&gt; -g &lt;Group&gt; username
 	
</code></pre>
<p>It’s optional to specify the new user’s home directory and group, but I strongly suggest to do so. <code>-m</code> stands for create home, <code>-d</code> to allocate a directory. (Warning, don’t mess up <code>useradd</code> and <code>adduser</code>, the later one is a higher level’s implementation. Here is a <a href="http://askubuntu.com/questions/345974/what-is-the-difference-between-adduser-and-useradd">detailed explanation of these two’s differences</a>.)</p>
<h2 id="How-to-create-a-group"><a href="#How-to-create-a-group" class="headerlink" title="How to create a group"></a>How to create a group</h2><p>By groupadd:</p>
<pre><code>groupadd groupname
</code></pre>
<h2 id="How-to-add-a-user-to-a-group"><a href="#How-to-add-a-user-to-a-group" class="headerlink" title="How to add a user to a group"></a>How to add a user to a group</h2><p>By usermod:<br>    usermod -a -G <groupname> username</p>
<p>where <code>usermod</code> means modify a user account, <code>-a</code> stands for append, append this user to a group.</p>
<p><a href="http://www.cyberciti.biz/faq/howto-linux-add-user-to-group/">Read more</a></p>
<h2 id="How-to-list-all-users-in-a-group"><a href="#How-to-list-all-users-in-a-group" class="headerlink" title="How to list all users in a group"></a>How to list all users in a group</h2><p>Well, there is not such a built-in command for that, but we can use:<br>	<br>	grep ‘^groupname’ &#x2F;etc&#x2F;group<br>	<br>or <code>apt-get install members</code>, then</p>
<pre><code>members groupname
</code></pre>
<h2 id="What-is-sticky-bit"><a href="#What-is-sticky-bit" class="headerlink" title="What is sticky bit"></a>What is sticky bit</h2><h3 id="What-is-sticky-bit-looks-like"><a href="#What-is-sticky-bit-looks-like" class="headerlink" title="What is sticky bit looks like"></a>What is sticky bit looks like</h3><p>Sticky bit is used for directories. As wikipedia said:</p>
<blockquote>
<p>When the sticky bit is set, only the item’s owner, the directory’s owner, or root can rename or delete files. Without the sticky bit set, any user with write and execute permissions for the directory can rename or delete contained files, regardless of owner.</p>
</blockquote>
<p>For example, if the professor create a &#x2F;homework directory with sticky bit, every student can upload their homework, but they cannot rename or delete other students’ homework.</p>
<h3 id="How-to-set-it"><a href="#How-to-set-it" class="headerlink" title="How to set it"></a>How to set it</h3><pre><code> chmod +t /path/to/directory
</code></pre>
<p>or</p>
<pre><code> chmod 1755
</code></pre>
<p>where 1 stands for sticky bit, 7 for owner has all privilege, 5 for read and execute privilege for the group, and for others.</p>
<p>Now, &#x2F;path&#x2F;to&#x2F;directory should looks like this (replaced last character):</p>
<pre><code>drwxr-xr-t   1 root     other          0 Nov 10 12:57 test
</code></pre>
<p>As wikipedia said, if the sticky-bit is set on the directory without the execution bit set for the others category, it is indicated with a capital T:</p>
<pre><code>drwxr-xr-T   1 root     other          0 Nov 10 12:57 test
 
</code></pre>
<p><a href="http://www.linuxnix.com/2012/01/sticky-bit-set-linux.html">Read more …</a></p>
<h2 id="What-is-setuid"><a href="#What-is-setuid" class="headerlink" title="What is setuid"></a>What is setuid</h2><p>One sentence explanation: Regardless of who runs this program, run it as the user who owns it, not the user that executes it.</p>
<h3 id="How-to-set-it-1"><a href="#How-to-set-it-1" class="headerlink" title="How to set it"></a>How to set it</h3><pre><code>chmod u+s /path/to/file
</code></pre>
<h3 id="And-it-is-dangerous"><a href="#And-it-is-dangerous" class="headerlink" title="And it is dangerous"></a>And it is dangerous</h3><p>For instance, a simple shell script <code>showfile.sh</code> has set setuid as root privilege:</p>
<pre><code> #!/bin/sh
 # showfile
 ls -l | sort
</code></pre>
<p>And If I am a bad guy, I could easily write script :</p>
<pre><code> rm -rf /some/where/important
</code></pre>
<p>and saved as name <code>ls</code>, add my <code>ls</code> to the front of $PATH. Now when I tried to run showfile.sh, Boom ! The files are deleted.</p>
<h2 id="BTW"><a href="#BTW" class="headerlink" title="BTW"></a>BTW</h2><p>If you found grammar errors or typos, please feel free to help me <a href="https://github.com/Wilbeibi/wilbeibi_blog_src/edit/master/source/_posts/2014-08-08-SysAdmin.md">correct it</a>.</p>
]]></content>
      <tags>
        <tag>Sysadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>Collaborative programming with Dropbox</title>
    <url>/2014/07/2014-07-17-dropbox-coding/</url>
    <content><![CDATA[<p>Recently, I am working on a web project collaborate with my friend Kelun. He is in charge of front-end code and I am taking care of backend code. So, here is a problem: How can we programming together smoothly? Which means, at any moment of time, I can check his code while he is programming.</p>
<h2 id="Why-not-Github"><a href="#Why-not-Github" class="headerlink" title="Why not Github?"></a>Why not Github?</h2><p>No, that’s little bit heavy for this project. So, what’s alternative choices? Dropbox! Dropbox maybe the easiest way to share folder (wait, you means <code>rsync</code>? Dropbox did a lot of algorithm improvement to ensure it’s higher speed of syncing)<br><img src="http://dl.dropbox.com/u/1656836/web3/invite-to-folder.png" alt="Alt text"></p>
<p>But, something weird happens. My Webstorm automatically changed layout views. That because he is also using Webstorm, and In each project, Webstorm use a <code>.idea/</code> directory to save specific settings (as the document below said).</p>
<blockquote>
<p>Project settings are stored with each specific project as a set of xml files under the .idea folder. If you specify the default project settings, these settings will be automatically used for each newly created project.</p>
</blockquote>
<h2 id="Is-there-any-gitginore-like-file-in-Dropbox"><a href="#Is-there-any-gitginore-like-file-in-Dropbox" class="headerlink" title="Is there any .gitginore like file in Dropbox?"></a>Is there any <code>.gitginore</code> like file in Dropbox?</h2><p>Sure. Of course it’s not as powerful as <code>.gitginore</code>. In dropbox -&gt; Preference -&gt; Account -&gt; Change Setting, unclick <code>.idea</code> folder, that’s all.</p>
<p>Also, I strongly suggest unclick <code>node_modules</code> folder. It takes Dropbox too much time to synchronize a bunch of small pieces of files.</p>
<p>And if you sometimes use Emacs, to avoid annoying temporary files (but some time really save you ass), the only way I know is to add this in <code>.emacs</code> file.</p>
<pre><code> (setq make-backup-files nil)
</code></pre>
<p>Please feel free to correct my typos or grammar.</p>
]]></content>
      <tags>
        <tag>miscellaneous</tag>
      </tags>
  </entry>
  <entry>
    <title>A Primer to System Administration - Know Thy System</title>
    <url>/2014/08/2014-08-10-SysAdmin2/</url>
    <content><![CDATA[<h2 id="General-information"><a href="#General-information" class="headerlink" title="General information"></a>General information</h2><ol>
<li><p>Use <code>uname</code> to get system information:</p>
<p> uname -a</p>
<p><code>-a</code> for print all the information.</p>
</li>
</ol>
<h2 id="CPU-information"><a href="#CPU-information" class="headerlink" title="CPU information"></a>CPU information</h2><ol>
<li><p>Use <code>nproc</code> to print the number of processing units available (GNU coreutils):</p>
<pre><code>$ nproc
4
</code></pre>
</li>
<li><p>Use <code>lscpu</code> to display CPU architecture information (util-linux).</p>
</li>
</ol>
<h2 id="Disk-information"><a href="#Disk-information" class="headerlink" title="Disk information"></a>Disk information</h2><ol>
<li><p><code>df</code> is a powerful command for displaying system disk.</p>
<pre><code> df -h /path/to/directory
</code></pre>
</li>
<li><p><code>cat /proc/partitions/</code> and <code>cat /proc/mounts</code> are also pretty handly solutions to check the partitions and mount disks.</p>
</li>
</ol>
<h2 id="Memory-information"><a href="#Memory-information" class="headerlink" title="Memory information"></a>Memory information</h2><ol>
<li><p>Just as same as disk, <code>cat /proc/meminfo</code> could easily check memory information (Thanks to Unix’s <a href="http://en.wikipedia.org/wiki/Everything_is_a_file"><strong>Everything is a file</strong></a> design concept).</p>
</li>
<li><p>Alternatively, you can type <code>free -m</code>, which essentially is the same as check &#x2F;meminfo. <code>-m</code> for display in megabytes (as you expected, -g for gigabytes, -k for kilobytes.)</p>
</li>
</ol>
<h2 id="User-activity-information"><a href="#User-activity-information" class="headerlink" title="User activity information"></a>User activity information</h2><ol>
<li><p><code>last</code> command will display user’s info like terminal, time, date and so forth. To check one specific user’s activity, <code>last username</code> is what you are looking for.</p>
</li>
<li><p><code>w</code> is a great but rarely know command. It will display who is logged on and what they are doing. It’ll show username, terminal, from IP, login time, idle time, JCPU and the  command line of their current process. If you never heard it before, I strongly suggest you to have a try.</p>
</li>
<li><p><code>uptime</code>: Tell how long the system has been running.</p>
</li>
<li><p><code>ps</code>: a well known command for checking current processes, for instance, to list all zombie process:</p>
<pre><code> ps aux | awk &#39;{ print $8 &quot; &quot; $2 }&#39; | grep -w Z
 
</code></pre>
<p> where <code>ps aux</code> to show processes for <strong>a</strong>ll users, the process’s <strong>u</strong>ser, and also show the processes not attached to a terminal (check man page for more details), then awk to filter the <code>STAT</code> and PID field, use grep to select the line contains <code>Z</code>(Zombie), now we get zombie processes pids. It’s easy to kill them by <code>kill -9 {PID}</code>.</p>
</li>
<li><p><code>top/htop</code>: Better not to use non-builtin command(for security reasons), but if you do want to, <code>htop</code> is a superior alternative to <code>top</code> – dynamically display current tasks.</p>
</li>
</ol>
<h2 id="Network-information"><a href="#Network-information" class="headerlink" title="Network information"></a>Network information</h2><ol>
<li><p>To get your own public IP, both <code>curl icanhazip.com</code> or <code>curl ifconfig.me</code> are easy ways to do that(previous one is much faster).</p>
</li>
<li><p><code>ping</code>: Even my mother knows to use <code>ping</code> to check network connectivity.</p>
</li>
<li><p><code>ifconfig</code>: A frequently used tool to view network interface information. BTW, I wrote a <a href="https://github.com/Wilbeibi/Ifconfig-extractor">script</a> to filter IP, MAC addresses and networks from <code>ifconfig</code> (tested on Ubuntu, Fedora, OmniOS and FreeBSD).</p>
</li>
<li><p><code>lsof</code>, aka list open files, is definitely a swiss army knife for analyzing network. <code>lsof -i</code> for list all open Internet and X.25 network files. (The examples below are from Daniel Miessler’s blog, see reference)</p>
<pre><code> lsof -iTCP # Show only TCP connections
 lsof -i:80 # Show networking only relate to port 80
 lsof -i@107.170.181.47 # Show connections with particular IP
 lsof -u username # Show given user&#39;s connections
 lsof -u ^username # Show connections except given user
 
</code></pre>
</li>
<li><p><code>ss -s</code>: display Currently Established, Closed, Orphaned and Waiting TCP sockets</p>
</li>
</ol>
<h2 id="You-may-Also-interested-in"><a href="#You-may-Also-interested-in" class="headerlink" title="You may Also interested in"></a>You may Also interested in</h2><ol>
<li>My previous post <a href="http://wilbeibi.com/2014/08/2014-08-08-SysAdmin/">A Primer to System Administration - Users and groups</a></li>
<li>If you found any grammar misusage or typos, please help me correct by <a href="https://github.com/Wilbeibi/wilbeibi_blog_src/blob/master/source/_posts/2014-08-10-SysAdmin2.md">pull request here</a>.</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.douban.com/note/265207425/">nodejs 部署最佳实践 by 邻家 柠檬叔</a></p>
<p><a href="http://www.tecmint.com/useful-linux-commands-for-system-administrators/">30 Useful Linux Commands for System Administrators</a></p>
<p><a href="http://unix.stackexchange.com/questions/106847/what-does-aux-mean-in-ps-aux">What does aux mean in <code>ps aux</code>?</a></p>
<p><a href="http://www.cyberciti.biz/tips/killing-zombie-process.html">Killing zombie process</a></p>
<p><a href="http://danielmiessler.com/study/lsof/">An lsof Primer</a></p>
<p><a href="http://www.cyberciti.biz/faq/check-network-connection-linux/">Linux: Check Network Connection Command</a></p>
]]></content>
      <tags>
        <tag>Sysadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>A Primer to System Administration - About SSH</title>
    <url>/2014/08/2014-08-29-SysAdmin3/</url>
    <content><![CDATA[<p>When we talk about SSH, we are usually referring to OpenSSH - a FREE version of the SSH connectivity tools. As their official website said:</p>
<blockquote>
<p>OpenSSH encrypts all traffic (including passwords) to effectively eliminate eavesdropping, connection hijacking, and other attacks. Additionally, OpenSSH provides secure tunneling capabilities and several authentication methods, and supports all SSH protocol versions.</p>
</blockquote>
<p><img src="http://www.openssh.com/images/openssh.gif"></p>
<p>And I believe <code>ssh</code> is one of the most used commands for programmers (Windows users, you have putty, that’s … not bad). In this post I am going to list some most basic usage of <code>ssh</code>.</p>
<h2 id="How-to-generate-key-pair"><a href="#How-to-generate-key-pair" class="headerlink" title="How to generate key pair?"></a>How to generate key pair?</h2><p>They are two ways to identify users: via password and via key pair. The latter one is <a href="http://en.wikipedia.org/wiki/Public-key_cryptography">more secure</a>. We can generate a key pair through:</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;
# Creates a new ssh key, using the provided email as a label
Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]
</code></pre>
<p>where <code>-t</code> stands for encryption type, <code>-C</code> for comment. Then choose a strong passphrase (in case of your rsa keys being stolen). Now, you will see id_rsa (private key) and id_rsa.pub (public key)in your <code>~/.ssh/</code> directory(Don’t let others know your private key).<br>At last, add your key to <code>ssh-agent</code>(a keys management tool):</p>
<pre><code>eval &quot;$(ssh-agent -s)&quot;
ssh-add ~/.ssh/id_rsa
</code></pre>
<h2 id="How-to-SSH-login-without-authentication"><a href="#How-to-SSH-login-without-authentication" class="headerlink" title="How to SSH login without authentication?"></a>How to SSH login without authentication?</h2><p>Now it’s time use our public key. For Linux user:</p>
<pre><code> ssh-copy-id user@machine
 
</code></pre>
<p>For Mac user, we can either <code>brew install ssh-copy-id</code> to install and use this command or <a href="http://askubuntu.com/questions/46424/adding-ssh-keys-to-authorized-keys">typing</a>:</p>
<pre><code> cat ~/.ssh/id_rsa.pub | ssh user@machine &quot;mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys&quot;
</code></pre>
<p>As you can tell, actually what we are doing here is copy the content of id_rsa.pub to server’s <code>~/.ssh/authorized_keys</code>.</p>
<h2 id="Make-an-alias-of-the-connection"><a href="#Make-an-alias-of-the-connection" class="headerlink" title="Make an alias of the connection"></a>Make an alias of the connection</h2><p>Laziness is a great virtue of a programmer. Add these to local <code>~/.ssh/config</code> (create if not exist) to simplify your life:</p>
<pre><code> Host matrix
      HostName &lt;domain name or public IP&gt;
      User &lt;user name&gt;
      IdentityFile &lt;/path/to/private_key&gt;
</code></pre>
<p>One more thing, ssh config support wildcard, so you can use </p>
<pre><code> Host *compute-1.amazonaws.com
</code></pre>
<p>for all your ec2 instances. I also added</p>
<pre><code>TCPKeepAlive=yes
ServerAliveInterval=15    
ServerAliveCountMax=6
StrictHostKeyChecking=no
Compression=yes
ForwardAgent=yes
RSAAuthentication=yes
PasswordAuthentication=yes
</code></pre>
<p>in my config file to add more feature.</p>
<h2 id="About-security"><a href="#About-security" class="headerlink" title="About security"></a>About security</h2><ol>
<li>Always set passphrase, or it might be <a href="https://www.netspi.com/blog/entryid/235/stealing-unencrypted-ssh-agent-keys-from-memory">stolen from memory</a>.</li>
<li>Maybe, use another port instead of 22 is a good idea (Check this: <a href="https://major.io/2013/05/14/changing-your-ssh-servers-port-from-the-default-is-it-worth-it/">Changing your ssh server’s port from the default: Is it worth it?</a>)</li>
</ol>
]]></content>
      <tags>
        <tag>Sysadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>2015 年部分计划</title>
    <url>/2015/01/2015-01-27-plan/</url>
    <content><![CDATA[<h2 id="2015-小部分计划"><a href="#2015-小部分计划" class="headerlink" title="2015 小部分计划"></a>2015 小部分计划</h2><p>2015年都过了一个月了。现在才开始写新年计划有点晚了，可晚比没有强。<br>规划一年是个很难的事儿，所以我就先计划一小部分，并附上deadline<br>（deadline driven development 是最有生产力的）。</p>
<ul>
<li>二月底至三月，拿到offer，希望大厂收留，这是今年，甚至是这几年最大的事儿。</li>
<li>读书，Peter Thiel 的 《Zero To One》， 王兴推荐的《Resource Revoution》, 朴灵大大的《深入浅出Nodejs》，还有王力的《中国古代文化常识》。</li>
<li>写博客，博客至少一周两更。不管是写技术还是什么乱七八糟的。</li>
<li>掌握Haskell的Monad。</li>
<li>最后一条，希望。。。唉，看缘分吧，现在时间是有了，再也没什么欺骗自己的借口了。<br>（说的好像有妹子看我博客一样，噗~）</li>
</ul>
<p>暂时就想到这么多，wilbeibi，加油！</p>
]]></content>
      <tags>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>How to deal with Git A-Z?</title>
    <url>/2014/07/2014-7-21-gitAtoZ/</url>
    <content><![CDATA[<p>In this post I am going to show you some common scenarios you may suffer when you use git. To benefit from this tutorial please make sure you have already set-up a git environment. If not, I would advise you to take a look at <a href="https://help.github.com/articles/set-up-git">here</a>.</p>
<h2 id="How-to-modify-file-and-update-to-remote-repository"><a href="#How-to-modify-file-and-update-to-remote-repository" class="headerlink" title="How to modify file and update to remote repository?"></a>How to modify file and update to remote repository?</h2><pre><code>git add file
git commit -m &quot;Aha, file modified&quot;
</code></pre>
<p>Or, just type</p>
<pre><code>git commit -am &quot;Aha, file modified&quot;
</code></pre>
<p>After that, push to remote repository:</p>
<pre><code>git push origin branch_name
</code></pre>
<p>So, what’s difference between these two? I will reach to that later.</p>
<h2 id="How-to-change-last-commit"><a href="#How-to-change-last-commit" class="headerlink" title="How to change last commit?"></a>How to change last commit?</h2><p>It’s a good practice to fix a wrong commit rather than make a new commit.<br>So, first, edit the file with the problem, make the corrections, then:</p>
<pre><code>git add now_right_file
git commit --amend
git push --force branch_name   # Warning!
</code></pre>
<p>Be careful, The <code>--force</code> is dangerous, it works fine to me for 99% cases, but it dose have potential harmness, and that’s <a href="http://stackoverflow.com/a/432518/1035859">why Linus doesn’t recommend it</a>.  </p>
<h2 id="How-to-delete-files-in-remote-repository"><a href="#How-to-delete-files-in-remote-repository" class="headerlink" title="How to delete files in remote repository?"></a>How to delete files in remote repository?</h2><p>There are two ways of delete files, delete locally and commit to remote repository, or just directly delete files in remote repository, like:</p>
<pre><code>git rm --cached file_to_delete
</code></pre>
<p>Even better, you can delete all the files match a certain <a href="http://linux.about.com/library/cmd/blcmdl7_glob.htm">glob</a>:</p>
<pre><code>git rm --cached &#39;merge-*&#39; # delete all the files start with &quot;merge-&quot;
</code></pre>
<h2 id="Pull-or-Fetch"><a href="#Pull-or-Fetch" class="headerlink" title="Pull or Fetch?"></a>Pull or Fetch?</h2><p>There already has an excellent and well accepted answer on StackOverflow, it’s way much better than my explanation –&gt; <a href="http://stackoverflow.com/questions/292357/difference-between-git-pull-and-git-fetch">link</a>:</p>
<blockquote>
<p>In the simplest terms, <code>git pull</code> does a <code>git fetch</code> followed by a <code>git merge</code>.<br>You can do a <code>git fetch</code> at any time to update your remote-tracking branches under <code>refs/remotes/&lt;remote&gt;/</code>. This operation never changes any of your own local branches under <code>refs/heads</code>, and is safe to do without changing your working copy. I have even heard of people running git fetch periodically in a cron job in the background (although I wouldn’t recommend doing this).</p>
</blockquote>
<blockquote>
<p>A <code>git pull</code> is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.</p>
</blockquote>
<h2 id="So-what-if-files-conflict-after-git-pull-auto-merge-failed"><a href="#So-what-if-files-conflict-after-git-pull-auto-merge-failed" class="headerlink" title="So, what if files conflict after git pull (auto merge failed)"></a>So, what if files conflict after git pull (auto merge failed)</h2><pre><code>git pull # will auto merge unconflicted part
git status # check the information of conflicted files
</code></pre>
<p>Use your favorite editor to edit the conflicted file with “&lt;&lt;&lt;&lt;&lt;&lt;” and “&gt;&gt;&gt;&gt;&gt;&gt;”, save it, commit it, that’s all.</p>
<p><a href="https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line">Read more</a>…</p>
<h2 id="How-to-overwrite-rather-than-merge-one-branch-from-another"><a href="#How-to-overwrite-rather-than-merge-one-branch-from-another" class="headerlink" title="How to overwrite, rather than merge, one branch from another"></a>How to overwrite, rather than merge, one branch from another</h2><pre><code>git checkout latest_branch
git merge -s ours to_overwrite_branch
</code></pre>
<p>What’s the <code>ours</code> means here? It’s a merge strategy, you can find it in <a href="http://git-scm.com/docs/git-checkout">git checkout doc</a>:</p>
<blockquote>
<p>  git checkout [–ours| theirs] branch<br>  –ours<br>	  –theirs<br>	<br>When checking out paths from the index, check out stage #2 (ours) or #3 (theirs) for unmerged paths.  </p>
</blockquote>
<blockquote>
<p>The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using -f will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using –ours or –theirs. With -m, changes made to the working tree file can be discarded to re-create the original conflicted merge result.</p>
</blockquote>
<h2 id="How-to-delete-a-branch"><a href="#How-to-delete-a-branch" class="headerlink" title="How to delete a branch?"></a>How to delete a branch?</h2><pre><code>git branch -d died_branch
git push origin --delete die_branch # or git push origin :died_branch
</code></pre>
<p><a href="http://stackoverflow.com/questions/2003505/how-to-delete-a-git-branch-both-locally-and-remotely">Read more</a>…</p>
<h2 id="How-to-roll-back-to-a-specific-commit"><a href="#How-to-roll-back-to-a-specific-commit" class="headerlink" title="How to roll back to a specific commit?"></a>How to roll back to a specific commit?</h2><pre><code>git reflog show # find revision hash
git checkout revision_hash .
</code></pre>
<p>I will explain this a little bit. <code>git reflog show</code> gives us a list of all the commits and their hashes. Then, checkout that specific hash.</p>
<p>Read more:</p>
<ul>
<li><a href="http://alblue.bandlem.com/2011/05/git-tip-of-week-reflogs.html">A deep look at <code>reflog</code></a> </li>
<li><a href="http://stackoverflow.com/questions/17857723/whats-the-difference-between-git-reflog-and-log">Difference between <code>reflog</code> and <code>log</code></a></li>
</ul>
<h2 id="What-is-commit-a"><a href="#What-is-commit-a" class="headerlink" title="What is commit -a?"></a>What is commit -a?</h2><p>Many people always ask how to combine <code>git add</code> and <code>git commit</code> in one command, and the most answered solution is <code>git commit -a -m &quot;blah blah&quot;</code>.</p>
<p>Yes and no. For the files which have been <code>git add</code> before, <code>git commit -a</code> will do the <code>git add</code> for you. But for rest files(aka untracked files), we have to the <code>git add</code>. If you really want to save the time for these tedious work, alias is what you are looking for.</p>
<h2 id="How-to-git-ignore-something-except-a-certain-file"><a href="#How-to-git-ignore-something-except-a-certain-file" class="headerlink" title="How to git ignore something except a certain file?"></a>How to git ignore something except a certain file?</h2><p>In .gitignore:</p>
<pre><code># Ignore everything
*
!except_script.sh
</code></pre>
<p>This will ignore everything but except_scrpit.sh.</p>
<h2 id="How-to-give-up-all-the-changes-since-last-commit"><a href="#How-to-give-up-all-the-changes-since-last-commit" class="headerlink" title="How to give up all the changes since last commit?"></a>How to give up all the changes since last commit?</h2><p>Once my silly cat was dancing on my keyboard after a commit mess up all the files!<br>Luckily, we can use</p>
<pre><code>git reset hard --HEAD^
</code></pre>
<p>to revert to the previous commit.</p>
<p>Or, I wrongly <code>git add should_not_add_file</code> , we can also use</p>
<pre><code>git reset HEAD should_not_add_file
</code></pre>
<p>to upstage that file. </p>
<h2 id="How-to-clone-a-specific-branch"><a href="#How-to-clone-a-specific-branch" class="headerlink" title="How to clone a specific branch"></a>How to clone a specific branch</h2><p><a href="http://stackoverflow.com/questions/1911109/git-clone-a-specific-branch">Stolen from Stackoverflow again</a></p>
<pre><code>git clone -b &lt;branch&gt; &lt;remote_repo&gt;
</code></pre>
<p>Example:</p>
<pre><code> git clone -b my-branch git@github.com:user/myproject.git
</code></pre>
<p>Alternative (no public key setup needed):</p>
<pre><code>git clone -b my-branch https://git@github.com/username/myproject.git
</code></pre>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>How to delete nodes of linked list with pointers-to-pointers (Chinese)</title>
    <url>/2015/02/2015-02-12-2D-pointer/</url>
    <content><![CDATA[<p>我在用C++写 Leetcode中 Remove duplicates from linked list II 一题时，看到别人的一份代码，感觉写法很有趣，细细研究了一下。受益不少。</p>
<p>在大部分链表题中，我们习惯于创建一个空节点dummy，使之指向链表的头结点，以方便对<br>第一个节点进行操作（比如，删除它）。最后答案返回dummy.next。比较有节操的同学会在<br>删除链表的某些节点时用delete，以免内存泄露，但是难道就没有考虑过dummy节点感受么？</p>
<p>使用一个二维指针，可以优雅的解决了这个问题。</p>
<p>举个简单的🌰：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Suppose we have a linked list &quot;1-&gt;2-&gt;3&quot;, we want to delete the    </span></span><br><span class="line"><span class="comment"> * second node, remains &quot;1-&gt;3&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">ListNode **p = &amp;head, *succ;</span><br><span class="line">p = &amp;(*p)-&gt;next;</span><br><span class="line">succ = (*p)-&gt;next;</span><br><span class="line"><span class="built_in">delete</span> (*p);</span><br><span class="line">(*p) = succ;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>尝试解释一下下。<code>p</code>是一个二级指针，也就是说，在一开始，<code>p</code>是一个指向一个指向<code>head</code>指针的指针（也就是<code>(*p)</code>指向<code>head</code>）。这样的好处就是，当我们需要在某一个时刻删除指向的节点（<code>delete *p</code>操作），p本身不受影响（当然，是p指向的指针所对应的内存空间被释放了）。唯一一点不方便的时，其他每次移动的时候，都要用<code>(*p)</code>（p淡淡的看着他指向的指针往后移。）</p>
<p>和用dummy解法不同的是，dummy解法指针后移是<code>ptr = ptr-&gt;next;</code>。那我们这呢？<code>(*p) = (*p)-&gt;next;</code>？这样是错的。比如<code>1-&gt;2</code>里从<code>1</code>移动到<code>2</code>的过程中，就把节点<code>1</code>修改了。所以，要移动的是p。即为<code>p = &amp;(*p)-&gt;next</code>，其中<code>-&gt;</code>的优先级是高于<code>&amp;</code>的，把p赋值为<code>(*p)-&gt;</code>的地址，所以现在<code>(*p)</code>指向老<code>(*p)</code>的next。</p>
<p>另一个大家可能关心的问题，在<code>delete (*p)</code>后，<code>(*p)</code>的前驱节点的next是怎么不找丢的呀？这其实涉及到<code>delete</code>的本质（Stackoverflow对这个问题有个不错的<a href="http://stackoverflow.com/a/11603084/1035859">回答</a>）。当我们调用<code>delete</code>的时候，那块内存里的数据其实并没有消失，只是这块内存地址被标记为可以利用，当之后的程序需要new的时候，才有可能覆盖掉这里的数据。就像爱情，没有一段新的覆盖，老的怎么忘的掉（情人节了还在改博客，唉~~）。所以这个代码严格意义上说是由风险的，如果在delete的一瞬间，正好另一个程序&#x2F;进程new了一块内存，又刚好是这里，这个方法就废了。fix的方法就是delete前，赋给一个临时变量，把next覆盖当前，再delete临时变量。</p>
<p>修改的过程中，发现陈皓也写过<a href="http://coolshell.cn/articles/8990.html">类似的文章</a>，这个trick被Linus举例为什么才是core low-level coding，真正懂指针的做法。 他的文章还有配图，如果我表述的还是没让大家理解，推荐去读一下。</p>
<p>PS：《Pointers In C》的第十二章《Using Structures and Pointers》，也有关于指针链表操作的详细解释。</p>
<p><img src="http://ecx.images-amazon.com/images/I/51A8TNWQ3BL.jpg"></p>
]]></content>
      <tags>
        <tag>algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Colorizing Loggers -- A simple practice of decorator</title>
    <url>/2015/02/2015-02-17-colorize-log/</url>
    <content><![CDATA[<h2 id="What-is-this-post-about"><a href="#What-is-this-post-about" class="headerlink" title="What is this post about"></a>What is this post about</h2><p>Many people believe that decorator is one of the obscure concepts in Python.<br>Trust me, it is not. To be short, <strong>a decorator is a function that modifies other<br>functions via closures.</strong></p>
<p>They are plenty detailed articles about what decorator it is so there is no need to write one more. If you are not familiar with it, you may want to check these:</p>
<ul>
<li><p><a href="http://sahandsaba.com/python-decorators.html">A Study of Python’s More Advanced Features Part II: Closures, Decorators and functools</a></p>
</li>
<li><p><a href="https://realpython.com/blog/python/primer-on-python-decorators/#.UvQEs0JdUwJ">Primer on Python Decorators</a></p>
</li>
</ul>
<p>In this article, I am going to use a simple but interesting example to show</p>
<ul>
<li>how to colorize the output in command line</li>
<li>how to implement a switch case in Python (Python does not have built-in switch case)</li>
<li>a decorator with parameters</li>
</ul>
<p>OK, let’s rock.</p>
<h2 id="colorize-your-text"><a href="#colorize-your-text" class="headerlink" title="colorize your text"></a>colorize your text</h2><p>There is a set of escape sequences used to change the color of texts. So if we want to colorize a sentence, we just need to put the sentence between the color escape sequence and reset escape sequence. For example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; ORANGE = <span class="string">&#x27;\033[33m&#x27;</span></span><br><span class="line">&gt;&gt; RED = <span class="string">&#x27;\033[31m&#x27;</span></span><br><span class="line">&gt;&gt; GREEN = <span class="string">&#x27;\033[32m&#x27;</span></span><br><span class="line">&gt;&gt; BLUE = <span class="string">&#x27;\033[34m&#x27;</span></span><br><span class="line">&gt;&gt; RESET = <span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span> ORANGE + <span class="string">&quot;Chinese New Year&quot;</span> + RESET</span><br><span class="line">&gt;&gt; <span class="built_in">print</span> GREEN + <span class="string">&quot;Chinese&quot;</span> + GREEN + <span class="string">&quot;New&quot;</span> + BLUE + <span class="string">&quot;Year&quot;</span> + RESET</span><br></pre></td></tr></table></figure>
<p>You will see<br><font style="font-family: courier;" color="orange">Chinese New Year</font></p>
<p>and<br><font style="font-family: courier;" color="red">Chinese </font><font style="font-family: courier;" color="green">New </font><font style="font-family: courier;" color="blue">Year</font></p>
<h2 id="How-to-choose-the-color-in-code"><a href="#How-to-choose-the-color-in-code" class="headerlink" title="How to choose the color in code"></a>How to choose the color in code</h2><p>As I said, Python does not support switch case. So we cannot switch the color name and choose the corresponding escaped sequence. Fortunately, dictionary would do the work.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getColor</span>(<span class="params">color</span>):</span><br><span class="line">    <span class="comment"># @param color: string like &quot;red&quot; or &quot;yellow&quot;</span></span><br><span class="line">    <span class="comment"># @return the corresponding escape sequence.</span></span><br><span class="line">    <span class="comment"># If not valid, return empty string</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    RED = <span class="string">&#x27;\033[31m&#x27;</span>,</span><br><span class="line">    GREEN = <span class="string">&#x27;\033[32m&#x27;</span>,</span><br><span class="line">    BLUE = <span class="string">&#x27;\033[34m&#x27;</span>,</span><br><span class="line">    <span class="comment"># and more ...</span></span><br><span class="line">    ORANGE = <span class="string">&#x27;\033[33m&#x27;</span></span><br><span class="line">    &#125;.get(color, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>The trick is, the dictionary’s built in <code>get</code> method. The first parameter here is key, the second optional parameter is default. As the docstring shows:</p>
<blockquote>
<p>D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.</p>
</blockquote>
<h2 id="Use-the-decorator"><a href="#Use-the-decorator" class="headerlink" title="Use the decorator"></a>Use the decorator</h2><p>Suppose we have a function to implement a task. It may has three kind of return string, if task is completed successfully, it returns “SUCCESS: blah blah …”, if the task is finished but we cannot ensure it’s corretness, it returns “WARNING: blah blah …”, if task failed, returns “ERROR: blah blah …”, how do we colorize these return strings?</p>
<p><a href="https://gist.github.com/Wilbeibi/a2ac59f211bcd681d007">Raw code</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">colorize</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getColor</span>(<span class="params">color</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;black&#x27;</span> : <span class="string">&#x27;\033[30m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;red&#x27;</span> : <span class="string">&#x27;\033[31m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;green&#x27;</span> : <span class="string">&#x27;\033[32m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;orange&#x27;</span> : <span class="string">&#x27;\033[33m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;blue&#x27;</span> : <span class="string">&#x27;\033[34m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;purple&#x27;</span> : <span class="string">&#x27;\033[35m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;cyan&#x27;</span> : <span class="string">&#x27;\033[36m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;light_grey&#x27;</span> : <span class="string">&#x27;\033[37m&#x27;</span></span><br><span class="line">        &#125;.get(color, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_colorize</span>():</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">            RESET = <span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line">            text = func()</span><br><span class="line">            <span class="comment">#if not isinstance(text, basestring):</span></span><br><span class="line">            <span class="comment">#    text = str(text)</span></span><br><span class="line">            level = text.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            color = &#123;</span><br><span class="line">                <span class="string">&#x27;SUCCESS&#x27;</span>: args[<span class="number">0</span>],</span><br><span class="line">                <span class="string">&#x27;WARNING&#x27;</span>: args[<span class="number">1</span>],</span><br><span class="line">                <span class="string">&#x27;ERROR&#x27;</span>: args[<span class="number">2</span>]</span><br><span class="line">            &#125;.get(level, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(getColor(color), text, RESET)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> _colorize</span><br><span class="line"></span><br><span class="line"><span class="meta">@colorize(<span class="params"><span class="string">&quot;green&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;red&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_task</span>():</span><br><span class="line">    <span class="comment"># working working ....</span></span><br><span class="line">    <span class="keyword">if</span> (success):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS: Yeah~~&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> (warning):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WARNING: wait, what?&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR: something went wrong here.&quot;</span></span><br></pre></td></tr></table></figure>

<p>As you can tell, to make the decorator with parameters, we need to put it in another decorator.</p>
<p>Decorator are often used as cache, profiler, logger, synchronization(acquire lock, drop lock) and so forth. One of my favourite library <a href="http://click.pocoo.org/3/">Click</a> is also a wonderful example.</p>
<p>Happy Chinese New Year ~</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Producer consumer problem in coroutine</title>
    <url>/2015/03/2015-03-02-coroutine-producer-comsumer/</url>
    <content><![CDATA[<h2 id="What-is-coroutine"><a href="#What-is-coroutine" class="headerlink" title="What is coroutine"></a>What is coroutine</h2><p>As the name implies, coroutine refers to co-operative routine. It allows you to suspending and resuming execution at different locations. So, it’s essentially just context switching. Not surprisingly, coroutine is implemented in primitives like setjmp&#x2F;longjump or ucontext in low level.</p>
<p>In many senarioes, coroutine is a more light-weight alternative of threads. For programming languages with GIL (like Python), coroutine would used to handle concurrency.</p>
<h2 id="Producer-and-consumer-problem"><a href="#Producer-and-consumer-problem" class="headerlink" title="Producer and consumer problem"></a>Producer and consumer problem</h2><p>Let’s take a look at classic “producer-consumer” problem. At each time, one coroutine produce products and add them into queue, the other coroutine take products from queue and use it (hmm, sounds like video buffering, right?). </p>
<p>The code below assumes you already have some knowledge of generator.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># A wrapper to convert function into generator</span></span><br><span class="line">    <span class="comment"># From David Beazley</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        cr = func(*args,**kwargs)</span><br><span class="line">        cr.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> cr</span><br><span class="line">    <span class="keyword">return</span> start  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">target</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        data = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;# producer: sending data &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">        target.send(data)</span><br><span class="line">        </span><br><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">yield</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;# consumer: receving data &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    g_consumer = consumer()</span><br><span class="line">    producer(g_consumer)</span><br></pre></td></tr></table></figure>
<p>Simple enough, <code>send()</code> is a built-in function of generator. The producer send data to consumer, consumer receives data from <code>yield</code>.</p>
<h2 id="Coroutine-usage"><a href="#Coroutine-usage" class="headerlink" title="Coroutine usage"></a>Coroutine usage</h2><p>Yes, the famous concurrency library gevent is based on coroutine.</p>
<h2 id="Reference-and-Recommended-Reading"><a href="#Reference-and-Recommended-Reading" class="headerlink" title="Reference and Recommended Reading:"></a>Reference and Recommended Reading:</h2><p><a href="https://www.python.org/dev/peps/pep-0342/">PEP 342: Coroutines via Enhanced Generators</a></p>
<p><a href="http://coolshell.cn/articles/10975.html">一个“蝇量级” C 语言协程库</a></p>
<p><a href="http://learn-gevent-socketio.readthedocs.org/en/latest/general_concepts.html">General concepts: concurrency, parallelism, threads and processes</a></p>
<p><a href="http://www.dabeaz.com/coroutines/">A Curious Course on Coroutines and Concurrency</a></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>找出编辑距离不大于 K 的单词</title>
    <url>/2015/05/2015-05-09-K_edit_distances/</url>
    <content><![CDATA[<h1 id="关于-edit-distance-的一道题"><a href="#关于-edit-distance-的一道题" class="headerlink" title="关于 edit distance 的一道题"></a>关于 edit distance 的一道题</h1><p>最近看到一个很有意思的面试题：给一个单词和一个字典，找出字典中所有和给定单词编辑距离不大于 k 的词。</p>
<p>一个常见的思路是遍历一遍，求单词和字典中每一项的编辑距离。我们知道编辑距离是二维 DP，时间复杂度为 $O(L^2)$，其中 L 为每个单词平均长度，则总时间复杂度为$O(NL^2)$， N 为字典中词的个数。</p>
<p>这个方法的问题在于，一旦查询单词变多，性能会很糟糕。基于<a href="http://www.zhihu.com/question/29592463">知乎 Lee Shellay的回答</a>，可以通过构造 Trie， 结合 DFS，来解决这个问题。</p>
<p>所以算法思路并不难：  </p>
<ol>
<li>根据字典中的单词构造前缀树，标记每个单词结束时的结束符为 ’$’。  </li>
<li>设计函数 API 为<code>check_fuzzy(trie, word, path, tol)</code>。<code>trie</code>是在树中当前走到的节点，<code>word</code> 表示走到当前节点剩余需要处理的查询单词，<code>path</code>表示走到当前节点已经记录的字典单词前缀，<code>tol</code> 表示剩余可容忍的编辑距离。然后定义一个set，不断找到可能的单词并入这个set，直到结束。<br>  所以，函数只在<code>tol</code> 为0时候终止（为什么不是<code>word</code>为空时候终止？因为有可用的编辑距离都用在增加后缀的情况）。</li>
</ol>
<ul>
<li>匹配当前字符，有两种情况：匹配，那么直接递归下一层；不匹配，可能是字母不一致或者是 word 已经结束（这个情况很容易被忽略），需要 tol 减一后递归下一层。</li>
<li>增加任意字母（字典单词比查询单词多字母）。这里和知乎回答里的不一样，那里是枚举了26个字母，其实只要枚举当前 tree 的所有节点字母就行了（Jayxon 大牛想到的）。</li>
<li>删除字符。word 向后移一个字母，tol 减一。</li>
</ul>
<p>最后代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Based on Lee Shellay&#x27;s code http://www.zhihu.com/question/29592463</span></span><br><span class="line"></span><br><span class="line">END = <span class="string">&#x27;$&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_trie</span>(<span class="params">words</span>):</span><br><span class="line">    trie = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        t = trie</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> t:</span><br><span class="line">                t[c] = &#123;&#125;</span><br><span class="line">            t = t[c]</span><br><span class="line">        t[END] = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> trie</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_fuzzy_v4</span>(<span class="params">trie, word, path = <span class="string">&#x27;&#x27;</span>, tol = <span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> tol &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    ps = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">if</span> word == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> END <span class="keyword">in</span> trie:</span><br><span class="line">             ps = &#123;path&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> trie:</span><br><span class="line">        <span class="comment"># match current or mark as substition</span></span><br><span class="line">        ps |= check_fuzzy_v4(trie[k], word[<span class="number">1</span>:], path+k, tol - (<span class="keyword">not</span> word <span class="keyword">or</span> k != word[<span class="number">0</span>]))</span><br><span class="line">        <span class="comment"># add random char</span></span><br><span class="line">        ps |= check_fuzzy_v4(trie[k], word, path+k, tol-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># delete one (if word is empty, word[2:] will not report error)</span></span><br><span class="line">    ps |= check_fuzzy_v4(trie, word[<span class="number">1</span>:], path, tol-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ps</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    words = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;hela&#x27;</span>, <span class="string">&#x27;hel&#x27;</span>, <span class="string">&#x27;dokm&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;ke&#x27;</span>, <span class="string">&#x27;ik&#x27;</span>]</span><br><span class="line">    t = make_trie(words)</span><br><span class="line">    <span class="built_in">print</span> check_fuzzy_v4(t, <span class="string">&#x27;helo&#x27;</span>,<span class="string">&#x27;&#x27;</span>, tol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>然后试试大一点的数据。我们知道在<code>/usr/share/dict/words</code>存着拼写检查的单词表，一共 2.4M 共 235886个单词（至少在我的 Mac 上是这么多）。可以用它来构造字典 <code>cat /usr/share/dict/words &gt; ./words.txt</code>。然后把一句话改的乱七八糟，用代码来跑跑试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    origin = <span class="string">&quot;For you know only a heap of broken images&quot;</span></span><br><span class="line">    modified = <span class="string">&quot;Far your knn onlie a deep of borken iimaes&quot;</span></span><br><span class="line"></span><br><span class="line">    words_list = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;words.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)]</span><br><span class="line">    tree = make_trie(words_list)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> modified.split():</span><br><span class="line">        <span class="built_in">print</span> check_fuzzy_v4(tree, w, tol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>结果也挺快的:</p>
<ul>
<li>CPython: 2.53s user 0.25s system 50% cpu 5.470 total</li>
<li>Pypy: 1.63s user 0.19s system 43% cpu 4.186 total</li>
</ul>
<p>就是这样,  喵~</p>
<p>PS: Lee Shellay回答又更新了，提升了性能和准确度，代码比我这的好，欢迎去看。</p>
]]></content>
      <tags>
        <tag>algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>一周笔记</title>
    <url>/2016/05/2016-05-16-weekly0/</url>
    <content><![CDATA[<h2 id="什么是一周笔记"><a href="#什么是一周笔记" class="headerlink" title="什么是一周笔记"></a>什么是一周笔记</h2><p>这是经女朋友提醒，准备每周一篇，阅读的技术博客，文章等的简短评论，干货收集，读书感想及各种好玩的事儿。</p>
<h2 id="模仿-O’Reilly-风格插图"><a href="#模仿-O’Reilly-风格插图" class="headerlink" title="模仿 O’Reilly 风格插图"></a>模仿 O’Reilly 风格插图</h2><p>一直觉得O’Reilly书系的示意图简洁美观，希望写博客或者presentation的时候也能用，今天花时间查了下，字体用的是 Myriad，编程字体用的是 Ubuntu Mono，用 Keynote 画了几个简单的图形，供日后使用。</p>
<p><img src="http://i.imgur.com/Iqq2QFG.png"></p>
<h2 id="Questions-to-ask-your-interviewer"><a href="#Questions-to-ask-your-interviewer" class="headerlink" title="Questions to ask your interviewer"></a><a href="https://rkoutnik.com/articles/Questions-to-ask-your-interviewer.html">Questions to ask your interviewer</a></h2><p>每次面试时候最后面试官都会问 “Do you have any questions?”，然后大多数人都只是问一些隔靴搔痒的问题，这篇文章比较深入的探讨这个问题，怎样让问面试官问题成为你的加分点，哪些问题能反映出这个公司的开发流程和工程师文化（关系到是否值得加入），面试必备的好问 （Victoria 同学翻译成了<a href="http://victoriahong.com/2016/05/question-to-ask-your-interviewer-translation/">中文</a>）。</p>
<h2 id="Cron-best-practices"><a href="#Cron-best-practices" class="headerlink" title="Cron best practices"></a><a href="https://sanctum.geek.nz/arabesque/cron-best-practices/">Cron best practices</a></h2><p>Cron通常用来每隔一段时间跑一个脚本，但大多数人都只是用来检查重启服务器或者备份。本文介绍了一些 Cron 的高级玩法，输出错误码，发送邮件，设置 timeout，等等。BTW，这个作者还有一些 Linux Crypto 的文章，也很值得一看。</p>
<h2 id="Choosing-a-Linux-Tracer"><a href="#Choosing-a-Linux-Tracer" class="headerlink" title="Choosing a Linux Tracer"></a><a href="http://www.brendangregg.com/blog/2015-07-08/choosing-a-linux-tracer.html">Choosing a Linux Tracer</a></h2><p>介绍了一堆Performance monitoring &amp; tunning 的工具，来自 Netflix senior performance architect。我查 systemtap 的时候翻到这哥们的博客，发现此人文章很棒，然后和我们司的performance engineer 聊文章中的问题，发现这博主是他当年在 Sun 的同事 … …</p>
<h2 id="Latency-Numbers-Every-Programmer-Should-Know"><a href="#Latency-Numbers-Every-Programmer-Should-Know" class="headerlink" title="Latency Numbers Every Programmer Should Know"></a><a href="https://gist.github.com/jboner/2841832">Latency Numbers Every Programmer Should Know</a></h2><p>这个介绍不同存储器性能的表格历史悠久，这个 gist 及其评论里很多人贡献了他们知道的相关的文档和视频，很多都很有意思。一些常用的还是很有必要背下来的（比如 CPU， 内存，硬盘， SSD 读取速度的倍数关系），对于初学编程的人能更好的了解 <a href="https://www.wikiwand.com/en/Locality_of_reference">locality</a> 的重要性。</p>
<h2 id="保证分布式系统数据一致性的6种方案"><a href="#保证分布式系统数据一致性的6种方案" class="headerlink" title="保证分布式系统数据一致性的6种方案"></a><a href="http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=2653546976&idx=1&sn=c3fb2338389a41e7ab998c0c21bd3e5d&scene=2&srcid=0419sWSVDrJ1czLxPzOdEyak&from=timeline&isappinstalled=0#wechat_redirect">保证分布式系统数据一致性的6种方案</a></h2><p>介绍了一些国内的案例，文末的链接也挺好的。</p>
<h2 id="浅谈-WHR-全历史排名"><a href="#浅谈-WHR-全历史排名" class="headerlink" title="浅谈 WHR 全历史排名"></a><a href="http://blog.codingnow.com/2016/03/whr.html#more">浅谈 WHR 全历史排名</a></h2><p>云风的文章和他的代码一样，一向以信噪比高著称。这是一篇谈博弈中的打分算法问题的，文中谈到elo就是电影《社交网络》中 Eduardo 在窗户上写的公式。</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>我为什么要编程</title>
    <url>/2015/02/2015-02-06-whyiwrite/</url>
    <content><![CDATA[<p>王小波和乔治奥威尔都曾以《我为什么要写作》为题写过他们的走上作家之路原因。对于这个问题，王小波借用了一位登山家的回答，“因为山在那儿。” （如你所知，那位登山家最后也确实在珠峰上挂掉了。）乔治奥威尔的回答则显得更有条理：纯粹的个人主义，美学热枕，历史责任感和政治目的。</p>
<p>你看，程序员界就很少有这么高的境界，去中关村随便抓个程序员，问他为什么编程，他就绝不会回答 “为公司立心，为开源立命，为community开太平”。当然，也有一些身怀抱负的有为青年（比如我），会不时纠结于这个问题。比如最近，我就为自己的志大才疏感到无比痛苦。成功学那些骗小孩儿的早就免疫了，得靠一些真实的数据来打鸡血。</p>
<p>首先，优秀的技术大牛是什么样的？我把我RSS订阅里的中文技术博客博主的信息都翻了一遍，统计出了一些有趣的东西：</p>
<ul>
<li>2&#x2F;3的大牛来自top20的学校，他们中不少人在读PhD。</li>
<li>至少一半的人大学前就开始接触编程。</li>
<li>15% 左右的人在海外留学或者工作，基本全部来自第一项的top20学校中。</li>
<li>在国内工作的中有四个都是在阿里。</li>
<li>貌似全部都用Mac。</li>
<li>30% 以上的人有优异的数学（参加过中学数学竞赛等）或者算法（ACM, OI）背景。</li>
<li>大部分人都有相当不错的文字功底，写作能力和阅读量都不赖。</li>
<li>他们大多数至少在国外技术博文翻译、Linux及开源、函数式编程、算法这四项中沾一样（这项可能是我口味问题，订阅有偏向性）。</li>
<li>30岁以上的人中，有不少是非计算机专业的。30岁以下的，基本都是CS科班出身。</li>
</ul>
<p>所以，我还不是完全没有机会的。我之所以喜欢这一行，就是因为这一行的聪明人太多了，勤奋的人太多了，这让我很有压力，这种压力很爽。</p>
<p>正如莱蒙托夫在的那首小诗《帆》：</p>
<p>在大海的深蓝色的云雾里，<br>一只孤独的帆儿闪着白光。<br>它在寻求什么，在那遥远的异地？<br>它抛下了什么，在那自己的故乡？<br>波涛在汹涌着，海风在呼啸着，<br>桅杆弓起腰来发出扎扎的声响。<br>不，它不是在寻求幸福，<br>它也不是在逃避幸福！<br>它下面是碧色的澄清的水流，<br>它上面是金色的太阳，<br>而它，不安地，在祈求着风暴，<br>仿佛是在风暴中才有安详。 </p>
]]></content>
      <tags>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>一周笔记</title>
    <url>/2016/07/2016-07-31-weekly3/</url>
    <content><![CDATA[<h2 id="How-to-Write-a-Lisp-Interpreter-in-Python"><a href="#How-to-Write-a-Lisp-Interpreter-in-Python" class="headerlink" title="(How to Write a (Lisp) Interpreter (in Python))"></a><a href="http://norvig.com/lispy.html">(How to Write a (Lisp) Interpreter (in Python))</a></h2><p>老文章。来自Peter Norvig 的用 Python 写个 lisp 解释器。代码和解释都很完美。记得有公司出面试题出类似的，如果用这文章里的思路解决就秒杀啊。</p>
<h2 id="DNS-The-good-parts"><a href="#DNS-The-good-parts" class="headerlink" title="DNS The good parts"></a><a href="https://www.petekeen.net/dns-the-good-parts">DNS The good parts</a></h2><p>比较详细的介绍 DNS 的文章</p>
<h2 id="2016年科技阅读列"><a href="#2016年科技阅读列" class="headerlink" title="2016年科技阅读列"></a><a href="https://zhuanlan.zhihu.com/p/20472545">2016年科技阅读列</a></h2><p>一系列架构和大数据文章的集合，质量良莠不齐，偶尔也有好玩的。</p>
<h2 id="高并发性能调试经验分享"><a href="#高并发性能调试经验分享" class="headerlink" title="高并发性能调试经验分享"></a><a href="https://zhuanlan.zhihu.com/p/21348220">高并发性能调试经验分享</a></h2><p>最喜欢看这种调试的文章了，特别是这篇『在多线程和高并发环境下，如果有一个平均运行一百万次才出现一次的bug，你如何调试这个bug』，连思路带工具一路娓娓道来，非常值得一读。</p>
<h2 id="Penetration-Testing-Tools-Cheat-Sheet"><a href="#Penetration-Testing-Tools-Cheat-Sheet" class="headerlink" title="Penetration Testing Tools Cheat Sheet "></a><a href="https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/">Penetration Testing Tools Cheat Sheet </a></h2><p>渗透工具 cheatsheet，初入安全的朋友可能会用得到。</p>
<h2 id="“The-Best-Programming-Advice-I-Ever-Got”-with-Rob-Pike"><a href="#“The-Best-Programming-Advice-I-Ever-Got”-with-Rob-Pike" class="headerlink" title="“The Best Programming Advice I Ever Got” with Rob Pike"></a><a href="http://www.informit.com/articles/article.aspx?p=1941206">“The Best Programming Advice I Ever Got” with Rob Pike</a></h2><p>Rob Pike 谈论 Ken Thompson 给他的编程建议：</p>
<blockquote>
<p>Ken taught me that thinking before debugging is extremely important. If you dive into the bug, you tend to fix the local issue in the code, but if you think about the bug first, how the bug came to be, you often find and correct a higher-level problem in the code that will improve the design and prevent further bugs.</p>
</blockquote>
<h2 id="The-twelve-factor-app"><a href="#The-twelve-factor-app" class="headerlink" title="The twelve-factor app"></a><a href="http://12factor.net/">The twelve-factor app</a></h2><p>从 Two Scoop of Django 上看来，有点类似写 app 的 best practices.</p>
<h2 id="The-Product-Managers’-Guide-to-Continuous-Delivery-and-DevOps"><a href="#The-Product-Managers’-Guide-to-Continuous-Delivery-and-DevOps" class="headerlink" title="The Product Managers’ Guide to Continuous Delivery and DevOps"></a><a href="http://www.mindtheproduct.com/2016/02/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us">The Product Managers’ Guide to Continuous Delivery and DevOps</a></h2><p>简单介绍什么是 Continuous Delivery 和 DevOps。</p>
<h2 id="ResysChina"><a href="#ResysChina" class="headerlink" title="ResysChina"></a><a href="https://zhuanlan.zhihu.com/resyschina">ResysChina</a></h2><p>着重推荐算法文章的高质量知乎专栏</p>
<h2 id="Real–world-HTTP-2-400gb-of-images-per-day"><a href="#Real–world-HTTP-2-400gb-of-images-per-day" class="headerlink" title="Real–world HTTP&#x2F;2: 400gb of images per day"></a><a href="https://99designs.com/tech-blog/blog/2016/07/14/real-world-http-2-400gb-of-images-per-day/">Real–world HTTP&#x2F;2: 400gb of images per day</a></h2><p>也是 debug 类的好网站。一个图片分享网站讲他们迁移到 HTTP&#x2F;2 的性能提升和坑。</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>一周笔记</title>
    <url>/2016/06/2016-06-05-weekly2/</url>
    <content><![CDATA[<h2 id="The-Software-Development-Poverty-Trap"><a href="#The-Software-Development-Poverty-Trap" class="headerlink" title="The Software Development Poverty Trap"></a><a href="http://alexandros.resin.io/the-software-development-poverty-trap/?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website">The Software Development Poverty Trap</a></h2><p>软件开发中的马太效应，越是差劲的团队越缺乏长期规划，用老旧的技术，写 ad-hoc 的代码，优秀的工程师越容易离开（斜眼看我司）。</p>
<h2 id="“把程序写好”这回事"><a href="#“把程序写好”这回事" class="headerlink" title="“把程序写好”这回事"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA3MDMwOTcwMg==&mid=2650004561&idx=1&sn=967c3816e3b0993b5517799183efb3be&scene=0#rd">“把程序写好”这回事</a></h2><p>来此余晟的微信公共号（对，就是翻译正则表达式的那哥们）。很多程序员在学校和工作中编程，但不知道如何写好程序，貌似也没有学校教如何『写好程序』。写好程序绝不是编译通过，跑过测试，符合 coding style 那么简单。文中提到的『荣誉感』还是挺重要的，我写代码的时候就会想着对自己的每一行代码负责，通过 code review 看别人的代码质量也会潜移默化影响我对这个人的评价，和对待他的态度。</p>
<h2 id="What-every-programmer-should-know-about-memory"><a href="#What-every-programmer-should-know-about-memory" class="headerlink" title="What every programmer should know about memory"></a><a href="https://www.akkadia.org/drepper/cpumemory.pdf">What every programmer should know about memory</a></h2><p>挺长的，从偏硬件的角度讲解内存的原理。前面几章在各个 OS 教科书上都能找到，后面的内容就比较贴近现实，看着很有意思。</p>
<h2 id="The-Little-Manual-of-API-Design"><a href="#The-Little-Manual-of-API-Design" class="headerlink" title="The Little Manual of API Design"></a><a href="http://people.mpi-inf.mpg.de/~jblanche/api-design.pdf">The Little Manual of API Design</a></h2><p>记得 GoogleTechTalk 里著名的一集 <a href="https://www.youtube.com/watch?v=aAb7hSCtvGw">How To Design A Good API and Why it Matters</a> 么，这个 manual 可以看作那个 talk 的扩展读物。API Design 在程序设计中的重要性相比于架构不遑多让，看看这些 best practices 有益身心~~</p>
<h2 id="What-Powers-Instagram-Hundreds-of-Instances-Dozens-of-Technologies"><a href="#What-Powers-Instagram-Hundreds-of-Instances-Dozens-of-Technologies" class="headerlink" title="What Powers Instagram: Hundreds of Instances, Dozens of Technologies"></a><a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a></h2><p>一篇老文章，介绍 Instagram 早期时候（2012）的架构。我最喜欢这种早期架构的文章，看别人在高速增长期如何用快糙猛的方法解决问题。里面给的小部分技术在今天看来有些过时了，但大部分还很有借鉴意义。比如提到的 gunicorn 和 Fabric，是 Python  web 开发中的标配（还有 supervisor）；vmtouch （查了下发现是一个超级light weight的内存数据管理工具，代码也写的很棒）；Munin，Pingdom  监控，Sentry 报告错误。</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>2016 年计划</title>
    <url>/2016/01/plan/</url>
    <content><![CDATA[<h1 id="2016-新年计划"><a href="#2016-新年计划" class="headerlink" title="2016 新年计划"></a>2016 新年计划</h1><p>一如既往的，新年是要计划的，实不实现再两说。</p>
<h2 id="2015-的计划回顾"><a href="#2015-的计划回顾" class="headerlink" title="2015 的计划回顾"></a>2015 的计划回顾</h2><ul>
<li>第一条计划算实现了四成，八九月份找到工作了。</li>
<li>第二条读书计划，毫无疑问轻松达成。</li>
<li>第三条写博客计划，额，可耻地没做到。</li>
<li>第四条掌握 Haskell 计划，算是搞定了。</li>
<li>第五条计划，今年继续~~</li>
</ul>
<h2 id="今年的计划"><a href="#今年的计划" class="headerlink" title="今年的计划"></a>今年的计划</h2><ul>
<li>写一个有分量的开源项目，或者写个库放上 pypi 之类的。</li>
<li>学一门手艺，摄影，跑酷，弹贝斯，篆刻或者其他什么的。</li>
<li>健身。因为练的无氧，这不好量化。以后再加具体的目标。</li>
<li>读书就不列了，一直没撂下。写博客，一周至少一篇。</li>
<li>继续找女朋友~</li>
</ul>
]]></content>
      <tags>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>一周笔记</title>
    <url>/2016/05/2016-05-21-weekly1/</url>
    <content><![CDATA[<h2 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h2><p>这周 RSS 里没啥非常好的文章，就把以前的笔记里翻出来几篇凑数。</p>
<h2 id="Elevate-yourself-with-side-projects"><a href="#Elevate-yourself-with-side-projects" class="headerlink" title="Elevate yourself with side projects"></a><a href="https://slackhq.com/elevate-yourself-with-side-projects-acbc43229422#.12qjef3av">Elevate yourself with side projects</a></h2><p>爱因斯坦的在专利局工作时候的 side project 是相对论论文，学校门卫波洛克（对，现代艺术甩泥点子那位）的 side project 是画画，Slack 一开始也是游戏公司的 side project 聊天工具。Side project 能真正有效促进一个人的专业进步（深有同感）。不是有句话说么，这年头在湾区没有一两个 side project 都不好意跟人打招呼。</p>
<h2 id="What-every-computer-science-major-should-know"><a href="#What-every-computer-science-major-should-know" class="headerlink" title="What every computer science major should know"></a><a href="http://matt.might.net/articles/what-cs-majors-should-know/">What every computer science major should know</a></h2><p>压箱底的老文章。 知名博主 Matt Might的一篇长文，很详细的列出了一个合格的 CS 学生应该学习和掌握的知识，任何一个学 CS 的学生都应该看看这篇文章。</p>
<h2 id="Peer-Code-Reviews-At-Loose-Cannon"><a href="#Peer-Code-Reviews-At-Loose-Cannon" class="headerlink" title="Peer Code Reviews At Loose Cannon"></a><a href="http://scottbilas.com/blog/peer-code-reviews-at-loose-cannon/">Peer Code Reviews At Loose Cannon</a></h2><p>技术博客大多谈的是如何学习新技术，如何设计架构，如何找工作，却很少谈如何正确的 Code Review 的。Code Review 在工作中非常重要，是有效的学习&#x2F;分享知识，增进办公室人际关系的途径。这一系列文章就很详细的谈了如何 Code Review。附赠这篇 <a href="http://www.kevinlondon.com/2015/05/05/code-review-best-practices.html">Code Review Best Practices</a>。</p>
<h2 id="香草冰淇淋，世界末日与烧鹿骨"><a href="#香草冰淇淋，世界末日与烧鹿骨" class="headerlink" title="香草冰淇淋，世界末日与烧鹿骨"></a><a href="http://chuansong.me/n/123723">香草冰淇淋，世界末日与烧鹿骨</a></h2><p>这是一篇我很喜欢的非技术文章。从顾客离奇的投诉『新车会对香草冰淇淋过敏』说起，分析了一些显式因果关系和其背后看似荒诞的理性依据。原文链接已经失效，给的链接是别的网站转的。</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
</search>
